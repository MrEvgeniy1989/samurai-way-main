{"version":3,"file":"static/js/230.b23f09a8.chunk.js","mappings":"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","sources":["components/Profile/Profile.module.css","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","webpack://samurai-way/./src/components/Profile/ProfileInfo/Contact/Contact.module.css?1e8e","components/Profile/ProfileInfo/Contact/Contact.tsx","components/Profile/ProfileInfo/ProfileDataForm/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/common/FormsControls/FormsControls.tsx","utils/validators/validators.ts","webpack://samurai-way/./src/components/common/FormsControls/FormsControls.module.css?eb50","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"profile\":\"Profile_profile__8AvcK\"};","// extracted by mini-css-extract-plugin\nexport default {\"profileInfoImg\":\"ProfileInfo_profileInfoImg__N4d5K\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__UU8E7\",\"mainPhoto\":\"ProfileInfo_mainPhoto__moSds\",\"fileInput\":\"ProfileInfo_fileInput__5GOXw\"};","import React, {ChangeEvent, FC, useEffect, useState} from \"react\";\r\n\r\ntype ProfileStatusWithHooksPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusWithHooks: FC<ProfileStatusWithHooksPropsType> = ({status, updateStatus}) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [newStatus, setNewStatus] = useState<string>(status)\r\n\r\n    useEffect(() => {\r\n        if (status !== newStatus)\r\n            setNewStatus(status)\r\n    }, [status])\r\n\r\n    const deActivateEditMode = () => {\r\n        setEditMode(false)\r\n        updateStatus(newStatus)\r\n    }\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        setNewStatus(e.currentTarget.value)\r\n    }\r\n    return (\r\n        <div>\r\n            {\r\n                !editMode\r\n                    ? <div>\r\n                        <b>Status: </b> <span onDoubleClick={activateEditMode}>{status || '------'}</span>\r\n                    </div>\r\n                    : <div>\r\n                        <input onChange={onStatusChange} value={newStatus} onBlur={deActivateEditMode} autoFocus/>\r\n                    </div>\r\n            }\r\n        </div>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"contact\":\"Contact_contact__vqn2I\"};","import React, {FC} from \"react\";\r\nimport s from \"./Contact.module.css\";\r\n\r\ntype ContactPropsType = {\r\n    contactTitle: string | null\r\n    contactValue: string | null\r\n}\r\nexport const Contact: FC<ContactPropsType> = ({contactTitle, contactValue}) => {\r\n    return <div className={s.contact}><b>{contactTitle}: </b> {contactValue}</div>\r\n}","import React, {FC} from \"react\";\r\nimport {ProfileType} from \"../../../../redux/profile-reducer\";\r\nimport {createField, Input, Textarea} from \"../../../common/FormsControls/FormsControls\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport styleFormControls from \"../../../common/FormsControls/FormsControls.module.css\";\r\n\r\ntype ProfileDataFormPropsType = {\r\n    profile: ProfileType\r\n}\r\n\r\nexport type FormDataType = {\r\n    fullName: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    aboutMe: string\r\n}\r\n\r\nconst ProfileDataForm: FC<InjectedFormProps<FormDataType> & ProfileDataFormPropsType> = ({handleSubmit, error, profile}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <button>Save</button>\r\n            </div>\r\n\r\n            {error && <div className={styleFormControls.formSummaryError}>{error}</div>}\r\n\r\n            <div>\r\n                <b>Full name: </b> {createField('Full name', 'fullName', [], Input)}\r\n            </div>\r\n            <div>\r\n                Looking for a job:\r\n                {createField('', 'lookingForAJob', [], Input, {type: 'checkbox'})}\r\n            </div>\r\n\r\n            <div>\r\n                <b>My professional skills: </b>\r\n                {createField('My professional skills', 'lookingForAJobDescription', [], Textarea)}\r\n            </div>\r\n\r\n            <div>\r\n                <b>About me: </b>\r\n                {createField('About me', 'aboutMe', [], Textarea)}\r\n            </div>\r\n\r\n            <div>\r\n                <b>Contacts: </b> {profile.contacts && Object.keys(profile.contacts).map(key => {\r\n                return <div key={key} className={'s.contact'}>\r\n                    <b>{key}: {createField(key, 'contacts.' + key, [], Input)}</b>\r\n                </div>\r\n            })}\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ProgileDataFormReduxForm = reduxForm<any, any>({form: 'edit-profile'})(ProfileDataForm)\r\nexport default ProgileDataFormReduxForm;","import React, {FC} from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport {ProfileType} from '../../../redux/profile-reducer';\r\nimport {Preloader} from '../../common/Preloader/Preloader';\r\nimport {ProfileStatusWithHooks} from './ProfileStatusWithHooks';\r\nimport userPhoto from './../../../assets/images/user.png'\r\nimport {Contact} from \"./Contact/Contact\";\r\nimport ProfileDataForm from \"./ProfileDataForm/ProfileDataForm\";\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (photoFile: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nexport const ProfileInfo: FC<ProfileInfoPropsType> = ({\r\n                                                          profile,\r\n                                                          status,\r\n                                                          updateStatus,\r\n                                                          isOwner,\r\n                                                          savePhoto,\r\n                                                          saveProfile\r\n                                                      }) => {\r\n\r\n    let [editMode, setEditMode] = React.useState(false)\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData: ProfileType) => {\r\n        saveProfile(formData).then(() => {\r\n            setEditMode(false)\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <div>\r\n                    <img src={profile.photos?.large || userPhoto} alt={'Avatar'} className={s.mainPhoto}/>\r\n                    {isOwner && <input type=\"file\" className={s.fileInput} onChange={onMainPhotoSelected}/>}\r\n                </div>\r\n                {editMode\r\n                    ? <ProfileDataForm onSubmit={onSubmit} profile={profile} initialValues={profile}/>\r\n                    : <ProfileData profile={profile} isOwver={isOwner} goToEditMode={() => {\r\n                        setEditMode(true)\r\n                    }}/>}\r\n\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType\r\n    isOwver: boolean\r\n    goToEditMode: () => void\r\n}\r\n\r\nconst ProfileData: FC<ProfileDataPropsType> = ({profile, isOwver, goToEditMode}) => {\r\n    return (\r\n        <div>\r\n            {isOwver && <div>\r\n                <button onClick={goToEditMode}>Edit</button>\r\n            </div>}\r\n            <div>\r\n                <b>Full name: </b> {profile.fullName}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job: </b>{profile.lookingForAJob ? 'yes' : 'no'}\r\n            </div>\r\n            {\r\n                profile.lookingForAJob &&\r\n                <div>\r\n                    <b>My professional skills: </b> {profile.lookingForAJobDescription}\r\n                </div>\r\n            }\r\n            <div>\r\n                <b>About me: </b> {profile.aboutMe}\r\n            </div>\r\n            <br/>\r\n            <div>\r\n                <b>Contacts: </b> {profile.contacts && Object.keys(profile.contacts).map(key => {\r\n                return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\r\n            })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__UQGsK\",\"posts\":\"MyPosts_posts__eHHT8\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__3RAd4\"};","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\ntype PostPropsType = {\r\n    message: String;\r\n    likesCount: number;\r\n}\r\n\r\nconst Post: React.FC<PostPropsType> = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://365psd.com/images/istock/previews/9730/97305669-avatar-icon-of-girl-in-a-baseball-cap.jpg\"\r\n                 alt=\"avatar_icon\"/>\r\n            {props.message}\r\n            <div>\r\n                <span>like</span>{props.likesCount}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;","import React, {FC} from 'react';\r\nimport style from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {MyPostsPropsType} from './MyPostsContainer';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {maxLengthCreator, required} from '../../../utils/validators/validators';\r\nimport {Textarea} from '../../common/FormsControls/FormsControls';\r\n\r\nexport const MyPosts = (props: MyPostsPropsType) => {\r\n\r\n    // shouldComponentUpdate(nextProps: Readonly<MyPostsPropsType>, nextState: Readonly<{}>, nextContext: any): boolean {\r\n    //     return nextProps !== this.props || nextState !== this.state\r\n    // }\r\n\r\n    let postsElements = [...props.posts].reverse().map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount}/>)\r\n\r\n    const onAddPost = (formData: FormDataType) => {\r\n        props.addPost(formData.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={style.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n            <div className={style.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\ntype AddNewPostFormPropsType = {}\r\n\r\ntype FormDataType = {\r\n    newPostText: string\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nlet AddNewPostForm: FC<InjectedFormProps<FormDataType> & AddNewPostFormPropsType> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name={'newPostText'} component={Textarea} placeholder={'Post message'}\r\n                       validate={[required, maxLength10]}/>\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nlet AddNewPostFormRedux = reduxForm<FormDataType>({form: 'ProfileAddNewPostForm'})(AddNewPostForm)","import React from 'react';\r\nimport {addPostActionCreator, PostDataType} from '../../../redux/profile-reducer';\r\nimport {MyPosts} from './MyPosts';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../../redux/redux-store';\r\nimport {Dispatch} from 'redux';\r\n\r\ntype MapStateToPropsType = {\r\n        posts: PostDataType[]\r\n}\r\ntype MapDispatchToPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\nexport type MyPostsPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        addPost: (newPostText: string) => {dispatch(addPostActionCreator(newPostText))}\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)","import React from 'react';\r\nimport s from './Profile.module.css';\r\nimport {ProfileInfo} from './ProfileInfo/ProfileInfo';\r\nimport {MyPostsContainer} from './MyPosts/MyPostsContainer';\r\nimport {ProfileType} from '../../redux/profile-reducer';\r\n\r\ntype ProfilePropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nexport const Profile = (props: ProfilePropsType) => {\r\n    return (\r\n        <div className={s.profile}>\r\n            <ProfileInfo savePhoto={props.savePhoto}\r\n                         isOwner={props.isOwner}\r\n                         profile={props.profile}\r\n                         status={props.status}\r\n                         saveProfile={props.saveProfile}\r\n                         updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n\r\n    );\r\n}","import React, {ComponentType} from 'react';\r\nimport {Profile} from './Profile';\r\nimport {connect} from 'react-redux';\r\nimport {\r\n    getStatus,\r\n    getUserProfile,\r\n    ProfileType,\r\n    savePhoto,\r\n    saveProfile,\r\n    updateStatus\r\n} from '../../redux/profile-reducer';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {compose} from 'redux';\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    authorizedUserId: number | null\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchToPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\nexport type ProfileContainerPropsType = MapStateToPropsType & MapDispatchToPropsType\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfileContainerPropsType\r\n\r\nclass ProfileContainer extends React.Component<PropsType, AppStateType> {\r\n\r\n    refreshProfile() {\r\n\r\n        let userId = +this.props.match.params.userId\r\n        if (!userId) {\r\n            this.props.authorizedUserId !== null ? userId = this.props.authorizedUserId : this.props.history.push('login')\r\n        }\r\n\r\n\r\n        // let userId = +this.props.match.params.userId\r\n        // if (!userId) {\r\n        //     this.props.authorizedUserId !== null ? userId = this.props.authorizedUserId : this.props.history.push('login')\r\n        //     // userId = this.props.authorizedUserId !== null ? this.props.authorizedUserId : 1049\r\n        //\r\n        //     // userId = this.props.authorizedUserId\r\n        //     // if (!userId) {\r\n        //     //   this.props.history.push('login')\r\n        //     // }\r\n        // }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<AppStateType>, snapshot?: any) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                     savePhoto={this.props.savePhoto}/>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth,\r\n})\r\n\r\nexport default compose<ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter,\r\n    // withAuthRedirect\r\n)(ProfileContainer)","import React, {FC, HTMLInputTypeAttribute} from 'react';\r\nimport style from './FormsControls.module.css'\r\nimport {Field, WrappedFieldInputProps, WrappedFieldMetaProps} from 'redux-form';\r\n\r\ntype FormsControlsPropsType = {\r\n    input: WrappedFieldInputProps\r\n    meta: WrappedFieldMetaProps\r\n    placeholder?: string\r\n    type?: HTMLInputTypeAttribute\r\n    autoFocus?: boolean\r\n}\r\n\r\nconst FormControl: FC<FormsControlsPropsType> = ({meta: {touched, error}, children}) => {\r\n    const hasError = touched && error\r\n    return (\r\n        <div className={style.formControl + ' ' + (hasError ? style.error : '')}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea: FC<FormsControlsPropsType> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    return <FormControl {...props} ><textarea {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const Input: FC<FormsControlsPropsType> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    return <FormControl {...props} ><input {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const createField = (placeholder: string | null, name: string, validators: any, component: FC<FormsControlsPropsType>, props: any = {}, text: string = '') => (\r\n    <div>\r\n        <Field placeholder={placeholder}\r\n               name={name}\r\n               validate={validators}\r\n               component={component}\r\n               {...props}\r\n        /> {text}\r\n    </div>\r\n)","export const required = (value: string) => {\r\n  if (value) return undefined\r\n\r\n  return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n  if (value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n  return undefined\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__iw5Wr\",\"error\":\"FormsControls_error__vUZR7\",\"formSummaryError\":\"FormsControls_formSummaryError__P7Ljl\"};","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["ProfileStatusWithHooks","status","updateStatus","useState","editMode","setEditMode","newStatus","setNewStatus","useEffect","onChange","e","currentTarget","value","onBlur","autoFocus","onDoubleClick","Contact","contactTitle","contactValue","className","s","reduxForm","form","handleSubmit","error","profile","onSubmit","styleFormControls","createField","Input","type","Textarea","contacts","Object","keys","map","key","ProfileInfo","isOwner","savePhoto","saveProfile","React","Preloader","src","photos","large","userPhoto","alt","target","files","length","formData","then","initialValues","ProfileData","isOwver","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","props","message","likesCount","maxLength10","maxLengthCreator","AddNewPostFormRedux","Field","name","component","placeholder","validate","required","MyPostsContainer","connect","state","posts","profilePage","dispatch","addPost","newPostText","addPostActionCreator","postsElements","reverse","p","id","style","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","compose","auth","isAuth","withRouter","FormControl","meta","touched","children","hasError","input","restProps","validators","text","maxLength","_slicedToArray","arr","i","Array","isArray","_i","Symbol","iterator","_s","_e","_arr","_n","_d","call","next","done","err","unsupportedIterableToArray","TypeError"],"sourceRoot":""}