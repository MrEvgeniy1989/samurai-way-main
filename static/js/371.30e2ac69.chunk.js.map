{"version":3,"file":"static/js/371.30e2ac69.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","webpack://samurai-way/./src/components/Dialogs/DialogItem/DialogItem.module.css?beb9","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.module.css","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.tsx","components/common/FormsControls/FormsControls.tsx","utils/validators/validators.ts","webpack://samurai-way/./src/components/common/FormsControls/FormsControls.module.css?eb50"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__srCLm\",\"dialogsItems\":\"Dialogs_dialogsItems__i2sNL\",\"messages\":\"Dialogs_messages__q0nwq\"};","// extracted by mini-css-extract-plugin\nexport default {\"dialog\":\"DialogItem_dialog__2M1m-\",\"active\":\"DialogItem_active__JKCM3\"};","import React from 'react';\r\nimport s from './DialogItem.module.css'\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nexport type DialogItemPropsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nexport const DialogItem: React.FC<DialogItemPropsType> = (props) => {\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink to={'/dialogs/' + props.id}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"Message_message__TpCs9\"};","import React from 'react';\r\nimport s from './Message.module.css'\r\n\r\nexport type MessagePropsType = {\r\n    message: string\r\n}\r\n\r\nexport const Message: React.FC<MessagePropsType> = (props) => {\r\n    return (\r\n        <div className={s.message}>{props.message}</div>\r\n    )\r\n}","import React, {FC} from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {Textarea} from '../common/FormsControls/FormsControls';\r\nimport {maxLengthCreator, required} from '../../utils/validators/validators';\r\n\r\ntype AddMessageFormPropsType = {}\r\nexport type FormDataType = {\r\n  newMessageBody: string\r\n}\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\n\r\nconst AddMessageForm: FC<InjectedFormProps<FormDataType> & AddMessageFormPropsType> = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>\r\n        <Field component={Textarea} name={'newMessageBody'} placeholder={'Enter your message'} validate={[required, maxLength50]}/>\r\n      </div>\r\n\r\n      <div>\r\n        <button>Send</button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default reduxForm<FormDataType>({form: 'dialogAddMessageForm'})(AddMessageForm)","import React, {ComponentType} from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {AppStateType} from '../redux/redux-store';\r\nimport {connect} from 'react-redux';\r\n\r\ntype MapStateToPropsType = {\r\n  isAuth: boolean\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType): MapStateToPropsType => ({\r\n  isAuth: state.auth.isAuth\r\n})\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>): ComponentType<T> {\r\n  const RedirectComponent = (props: MapStateToPropsType) => {\r\n    let {isAuth, ...restProps} = props\r\n    if (!props.isAuth) return <Redirect to={'/login'}/>\r\n    return <Component {...restProps as T}/>\r\n  };\r\n\r\n  let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n  return ConnectedAuthRedirectComponent;\r\n}","import React, {ComponentType} from 'react';\r\nimport {InitialStateType, sendMessageCreator} from '../../redux/dialogs-reducer';\r\nimport {Dialogs} from './Dialogs';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {compose, Dispatch} from 'redux';\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\n\r\ntype MapStateToPropsType = {\r\n  dialogsPage: InitialStateType\r\n}\r\ntype MapDispatchToPropsType = {\r\n  sendMessage: (newMessageBody: string) => void\r\n}\r\nexport type DialogsPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n  return {\r\n    dialogsPage: state.dialogsPage\r\n  }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n  return {\r\n    sendMessage: (newMessageBody: string) => {dispatch(sendMessageCreator(newMessageBody))},\r\n  }\r\n}\r\n\r\nexport default compose<ComponentType>(\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  withAuthRedirect\r\n)(Dialogs)","import React from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport {DialogItem} from './DialogItem/DialogItem';\r\nimport {Message} from './Message/Message';\r\nimport {DialogsPropsType} from './DialogsContainer';\r\nimport AddMessageForm, {FormDataType} from './AddMessageForm';\r\n\r\n\r\nexport const Dialogs = (props: DialogsPropsType) => {\r\n  const state = props.dialogsPage\r\n\r\n  const dialogsElements = state.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id}/>)\r\n  const messagesElements = state.messages.map(m => <Message message={m.message} key={m.id}/>)\r\n\r\n\r\n  const addNewMessage = (formData: FormDataType) => {\r\n    props.sendMessage(formData.newMessageBody)\r\n  }\r\n\r\n\r\n  return (\r\n    <div className={s.dialogs}>\r\n      <div className={s.dialogsItems}>\r\n        {dialogsElements}\r\n      </div>\r\n      <div className={s.messages}>\r\n        <div>{messagesElements}</div>\r\n        <AddMessageForm onSubmit={addNewMessage}/>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n","import React, {FC, HTMLInputTypeAttribute} from 'react';\r\nimport style from './FormsControls.module.css'\r\nimport {Field, WrappedFieldInputProps, WrappedFieldMetaProps} from 'redux-form';\r\n\r\ntype FormsControlsPropsType = {\r\n    input: WrappedFieldInputProps\r\n    meta: WrappedFieldMetaProps\r\n    placeholder?: string\r\n    type?: HTMLInputTypeAttribute\r\n    autoFocus?: boolean\r\n}\r\n\r\nconst FormControl: FC<FormsControlsPropsType> = ({meta: {touched, error}, children}) => {\r\n    const hasError = touched && error\r\n    return (\r\n        <div className={style.formControl + ' ' + (hasError ? style.error : '')}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea: FC<FormsControlsPropsType> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    return <FormControl {...props} ><textarea {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const Input: FC<FormsControlsPropsType> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    return <FormControl {...props} ><input {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const createField = (placeholder: string | null, name: string, validators: any, component: FC<FormsControlsPropsType>, props: any = {}, text: string = '') => (\r\n    <div>\r\n        <Field placeholder={placeholder}\r\n               name={name}\r\n               validate={validators}\r\n               component={component}\r\n               {...props}\r\n        /> {text}\r\n    </div>\r\n)","export const required = (value: string) => {\r\n  if (value) return undefined\r\n\r\n  return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n  if (value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n  return undefined\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__iw5Wr\",\"error\":\"FormsControls_error__vUZR7\",\"formSummaryError\":\"FormsControls_formSummaryError__P7Ljl\"};"],"names":["DialogItem","props","className","s","to","id","name","Message","message","maxLength50","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","mapStateToPropsForRedirect","state","isAuth","auth","compose","connect","dialogsPage","dispatch","sendMessage","newMessageBody","sendMessageCreator","Component","restProps","dialogsElements","dialogs","map","d","messagesElements","messages","m","formData","FormControl","meta","touched","error","children","hasError","style","input","Input","createField","validators","text","value","maxLength","length"],"sourceRoot":""}