{"version":3,"file":"static/js/371.46cf79e6.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","webpack://samurai-way/./src/components/Dialogs/DialogItem/DialogItem.module.css?beb9","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.module.css","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.tsx","components/common/FormsControls/FormsControls.tsx","utils/validators/validators.ts","webpack://samurai-way/./src/components/common/FormsControls/FormsControls.module.css?eb50"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__srCLm\",\"dialogsItems\":\"Dialogs_dialogsItems__i2sNL\",\"messages\":\"Dialogs_messages__q0nwq\"};","// extracted by mini-css-extract-plugin\nexport default {\"dialog\":\"DialogItem_dialog__2M1m-\",\"active\":\"DialogItem_active__JKCM3\"};","import React from \"react\";\r\nimport s from \"./DialogItem.module.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n  id: number;\r\n  name: string;\r\n};\r\n\r\nexport const DialogItem: React.FC<PropsType> = (props) => {\r\n  const path = \"/dialogs/\" + props.id;\r\n  return (\r\n    <div className={s.dialog + \" \" + s.active}>\r\n      <NavLink to={path}>{props.name}</NavLink>\r\n    </div>\r\n  );\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"Message_message__TpCs9\"};","import React from \"react\";\nimport s from \"./Message.module.css\";\n\nexport type MessagePropsType = {\n  message: string;\n};\n\nexport const Message: React.FC<MessagePropsType> = (props) => {\n  return <div className={s.message}>{props.message}</div>;\n};\n","import React, { FC } from \"react\";\nimport { InjectedFormProps, reduxForm } from \"redux-form\";\nimport { createField, MyTextarea } from \"../common/FormsControls/FormsControls\";\nimport { maxLengthCreator, required } from \"../../utils/validators/validators\";\n\nconst maxLength50 = maxLengthCreator(50);\n\nconst AddMessageForm: FC<InjectedFormProps<FormDataType, AddMessageFormPropsType> & AddMessageFormPropsType> = (\n  props\n) => {\n  return (\n    <form onSubmit={props.handleSubmit}>\n      <div>\n        {createField<NewMessageFormValuesKeysType>(\n          \"Enter your message\",\n          \"newMessageBody\",\n          [required, maxLength50],\n          MyTextarea\n        )}\n        {/*        <Field\n          component={Textarea}\n          name={\"newMessageBody\"}\n          placeholder={\"Enter your message\"}\n          validate={[required, maxLength50]}\n        />*/}\n      </div>\n\n      <div>\n        <button>Send</button>\n      </div>\n    </form>\n  );\n};\n\nexport default reduxForm<FormDataType>({ form: \"dialogAddMessageForm\" })(AddMessageForm);\n\n// Types\ntype AddMessageFormPropsType = {};\nexport type FormDataType = { newMessageBody: string };\ntype NewMessageFormValuesKeysType = Extract<keyof FormDataType, string>;\n","import React, { ComponentType } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { AppStateType } from \"../redux/redux-store\";\r\nimport { connect } from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType): MapStateToPropsType => ({\r\n  isAuth: state.auth.isAuth,\r\n});\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>): ComponentType<T> {\r\n  const RedirectComponent = (props: MapStateToPropsType) => {\r\n    let { isAuth, ...restProps } = props;\r\n    if (!props.isAuth) return <Redirect to={\"/login\"} />;\r\n    return <Component {...(restProps as T)} />;\r\n  };\r\n\r\n  return connect<MapStateToPropsType, MapDispatchToPropsType, T, AppStateType>(\r\n    mapStateToPropsForRedirect,\r\n    {}\r\n  )(RedirectComponent);\r\n}\r\n\r\n// Types\r\ntype MapStateToPropsType = { isAuth: boolean };\r\ntype MapDispatchToPropsType = {};\r\n","import { Dialogs } from \"./Dialogs\";\r\nimport { connect } from \"react-redux\";\r\nimport { AppStateType } from \"../../redux/redux-store\";\r\nimport { compose, Dispatch } from \"redux\";\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\nimport { DialogsInitialStateType, dialogsReducerAtions } from \"../../redux/dialogs-reducer\";\r\nimport { ComponentType } from \"react\";\r\n\r\ntype MapStateToPropsType = {\r\n  dialogsPage: DialogsInitialStateType;\r\n};\r\ntype MapDispatchToPropsType = {\r\n  sendMessage: (newMessageBody: string) => void;\r\n};\r\nexport type DialogsPropsType = MapStateToPropsType & MapDispatchToPropsType;\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n  return {\r\n    dialogsPage: state.dialogsPage,\r\n  };\r\n};\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n  return {\r\n    sendMessage: (newMessageBody: string) => {\r\n      dispatch(dialogsReducerAtions.sendMessage(newMessageBody));\r\n    },\r\n  };\r\n};\r\n\r\nexport default compose<ComponentType>(\r\n  connect<MapStateToPropsType, MapDispatchToPropsType, {}, AppStateType>(mapStateToProps, mapDispatchToProps),\r\n  withAuthRedirect\r\n)(Dialogs);\r\n","import React, { FC } from \"react\";\r\nimport s from \"./Dialogs.module.css\";\r\nimport { DialogItem } from \"./DialogItem/DialogItem\";\r\nimport { Message } from \"./Message/Message\";\r\nimport { DialogsPropsType } from \"./DialogsContainer\";\r\nimport AddMessageForm, { FormDataType } from \"./AddMessageForm\";\r\n\r\nexport const Dialogs: FC<DialogsPropsType> = (props) => {\r\n  const state = props.dialogsPage;\r\n\r\n  const dialogsElements = state.dialogs.map((d) => <DialogItem name={d.name} key={d.id} id={d.id} />);\r\n  const messagesElements = state.messages.map((m) => <Message message={m.message} key={m.id} />);\r\n\r\n  const addNewMessage = (formData: FormDataType) => {\r\n    props.sendMessage(formData.newMessageBody);\r\n  };\r\n\r\n  return (\r\n    <div className={s.dialogs}>\r\n      <div className={s.dialogsItems}>{dialogsElements}</div>\r\n      <div className={s.messages}>\r\n        <div>{messagesElements}</div>\r\n        <AddMessageForm onSubmit={addNewMessage} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { FC } from \"react\";\nimport style from \"./FormsControls.module.css\";\nimport { Field, WrappedFieldMetaProps, WrappedFieldProps } from \"redux-form\";\nimport { FieldValidatorType } from \"../../../utils/validators/validators\";\nimport TextArea from \"antd/es/input/TextArea\";\nimport { Input } from \"antd\";\n\ntype FormsControlsPropsType = {\n  meta: WrappedFieldMetaProps;\n  //   input: WrappedFieldInputProps;\n  //   // placeholder?: string;\n  //   // type?: HTMLInputTypeAttribute;\n  //   // autoFocus?: boolean;\n};\n\nconst FormControl: FC<FormsControlsPropsType> = ({ meta: { touched, error }, children }) => {\n  const hasError = touched && error;\n  return (\n    <div className={style.formControl + \" \" + (hasError ? style.error : \"\")}>\n      <div>{children}</div>\n      {hasError && <span>{error}</span>}\n    </div>\n  );\n};\n\nexport const MyTextarea: FC<WrappedFieldProps> = (props) => {\n  const { input, meta, ...restProps } = props;\n  return (\n    <FormControl {...props}>\n      <TextArea {...input} {...restProps} />\n    </FormControl>\n  );\n};\n\nexport const MyInput: FC<WrappedFieldProps> = (props) => {\n  const { input, meta, ...restProps } = props;\n  return (\n    <FormControl {...props}>\n      <Input {...input} {...restProps} />\n    </FormControl>\n  );\n};\n\nexport function createField<FormKeysType extends string>(\n  placeholder: string | undefined,\n  name: FormKeysType,\n  validators: FieldValidatorType[],\n  component: FC<WrappedFieldProps>,\n  props: any = {},\n  text: string = \"\"\n) {\n  return (\n    <>\n      <Field placeholder={placeholder} name={name} validate={validators} component={component} {...props} /> {text}\n    </>\n  );\n}\n","export type FieldValidatorType = (value: string) => string | undefined;\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n  if (value) return undefined;\r\n\r\n  return \"Field is required\";\r\n};\r\n\r\nexport const maxLengthCreator =\r\n  (maxLength: number): FieldValidatorType =>\r\n  (value) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n  };\r\n","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__iw5Wr\",\"error\":\"FormsControls_error__vUZR7\",\"formSummaryError\":\"FormsControls_formSummaryError__P7Ljl\"};"],"names":["DialogItem","props","path","id","className","s","to","name","Message","message","maxLength50","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","createField","required","MyTextarea","mapStateToPropsForRedirect","state","isAuth","auth","compose","connect","dialogsPage","dispatch","sendMessage","newMessageBody","dialogsReducerAtions","Component","restProps","dialogsElements","dialogs","map","d","messagesElements","messages","m","formData","FormControl","meta","touched","error","children","hasError","style","input","MyInput","placeholder","validators","component","text","validate","value","maxLength","length"],"sourceRoot":""}