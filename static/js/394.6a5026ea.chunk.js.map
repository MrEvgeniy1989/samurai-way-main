{"version":3,"file":"static/js/394.6a5026ea.chunk.js","mappings":"sRAWaA,EAAiG,SAAC,GAIxG,IAHLC,EAGI,EAHJA,aACAC,EAEI,EAFJA,MACAC,EACI,EADJA,WAEA,OACE,kBAAMC,SAAUH,EAAhB,WACGI,EAAAA,EAAAA,IAAqC,QAAS,QAAS,CAACC,EAAAA,GAAWC,EAAAA,KACnEF,EAAAA,EAAAA,IAAqC,WAAY,WAAY,CAACC,EAAAA,GAAWC,EAAAA,GAAS,CAAEC,KAAM,cAC1FH,EAAAA,EAAAA,SAAqCI,EAAW,aAAc,GAAIF,EAAAA,GAAS,CAAEC,KAAM,YAAc,eAEjGL,IAAc,gBAAKO,IAAKP,EAAYQ,IAAK,YACzCR,IAAcE,EAAAA,EAAAA,IAAqC,qBAAsB,UAAW,CAACC,EAAAA,GAAWC,EAAAA,GAAS,IAEzGL,IAAS,gBAAKU,UAAWC,EAAAA,EAAAA,iBAAhB,SAAqDX,KAE/D,0BACE,4CAMFY,GAAiBC,EAAAA,EAAAA,GAAmD,CAAEC,KAAM,SAA3DD,CAAsEf,GAEhFiB,EAAgB,WAC3B,IAAMd,GAAae,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKjB,cAC7DkB,GAASH,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKC,UACzDC,GAAWC,EAAAA,EAAAA,MAMjB,OAAIF,GACK,SAAC,KAAD,CAAUG,GAAI,cAIrB,4BACE,mCACA,SAACV,EAAD,CAAgBV,SAXH,SAACqB,GAChBH,GAASI,EAAAA,EAAAA,IAAMD,EAASE,MAAOF,EAASG,SAAUH,EAASI,WAAYJ,EAASK,WAU1C3B,WAAYA,S,8NCrChD4B,EAA0C,SAAC,GAA4C,IAAD,IAAzCC,KAAQC,EAAiC,EAAjCA,QAAS/B,EAAwB,EAAxBA,MAASgC,EAAe,EAAfA,SACrEC,EAAWF,GAAW/B,EAC5B,OACE,iBAAKU,UAAWwB,EAAAA,EAAAA,YAAoB,KAAOD,EAAWC,EAAAA,EAAAA,MAAc,IAApE,WACE,yBAAMF,IACLC,IAAY,0BAAOjC,QAKbmC,EAAoC,SAACC,GAChD,IAAQC,EAA8BD,EAA9BC,MAAgBC,GAAcF,EAAvBN,MAAf,OAAsCM,EAAtC,IACA,OACE,SAACP,GAAD,kBAAiBO,GAAjB,cACE,SAAC,KAAD,kBAAcC,GAAWC,QAKlBjC,EAAiC,SAAC+B,GAC7C,IAAQC,EAA8BD,EAA9BC,MAAgBC,GAAcF,EAAvBN,MAAf,OAAsCM,EAAtC,IACA,OACE,SAACP,GAAD,kBAAiBO,GAAjB,cACE,SAAC,KAAD,kBAAWC,GAAWC,QAKrB,SAASnC,EACdoC,EACAC,EACAC,EACAC,GAGC,IAFDN,EAEA,uDAFa,GACbO,EACA,uDADe,GAEf,OACE,iCACE,SAAC,KAAD,QAAOJ,YAAaA,EAAaC,KAAMA,EAAMI,SAAUH,EAAYC,UAAWA,GAAeN,IAD/F,IAC0GO,O,4ECnDvG,IAAMvC,EAA+B,SAACyC,GAC3C,IAAIA,EAEJ,MAAO,qBAGIC,EACX,SAACC,GAAD,OACA,SAACF,GACC,GAAIA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,mBCVlC,KAAgB,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB","sources":["components/Login/LoginPage.tsx","components/common/FormsControls/FormsControls.tsx","utils/validators/validators.ts","webpack://samurai-way/./src/components/common/FormsControls/FormsControls.module.css?eb50"],"sourcesContent":["import React, { FC } from \"react\";\nimport styleFormControls from \"../common/FormsControls/FormsControls.module.css\";\nimport { InjectedFormProps, reduxForm } from \"redux-form\";\nimport { createField, MyInput } from \"../common/FormsControls/FormsControls\";\nimport { required } from \"../../utils/validators/validators\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { login } from \"../../redux/auth-reducer\";\nimport { Redirect } from \"react-router-dom\";\nimport { AppStateType } from \"../../redux/redux-store\";\nimport { GetStringKeys } from \"../../types/types\";\n\nexport const LoginForm: FC<InjectedFormProps<LoginFormValuesType, LoginFormPropsType> & LoginFormPropsType> = ({\n  handleSubmit,\n  error,\n  captchaUrl,\n}) => {\n  return (\n    <form onSubmit={handleSubmit}>\n      {createField<LoginFormValuesTypeKeys>(\"Email\", \"email\", [required], MyInput)}\n      {createField<LoginFormValuesTypeKeys>(\"Password\", \"password\", [required], MyInput, { type: \"password\" })}\n      {createField<LoginFormValuesTypeKeys>(undefined, \"rememberMe\", [], MyInput, { type: \"checkbox\" }, \"Remember me\")}\n\n      {captchaUrl && <img src={captchaUrl} alt={\"captcha\"} />}\n      {captchaUrl && createField<LoginFormValuesTypeKeys>(\"Symbols from image\", \"captcha\", [required], MyInput, {})}\n\n      {error && <div className={styleFormControls.formSummaryError}>{error}</div>}\n\n      <div>\n        <button>Login</button>\n      </div>\n    </form>\n  );\n};\n\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormPropsType>({ form: \"login\" })(LoginForm);\n\nexport const LoginPage: FC = () => {\n  const captchaUrl = useSelector((state: AppStateType) => state.auth.captchaUrl);\n  const isAuth = useSelector((state: AppStateType) => state.auth.isAuth);\n  const dispatch = useDispatch();\n\n  const onSubmit = (formData: LoginFormValuesType) => {\n    dispatch(login(formData.email, formData.password, formData.rememberMe, formData.captcha));\n  };\n\n  if (isAuth) {\n    return <Redirect to={\"/profile\"} />;\n  }\n\n  return (\n    <div>\n      <h1>Login</h1>\n      <LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl} />\n    </div>\n  );\n};\n\n// Types\ntype LoginFormPropsType = {\n  captchaUrl: string | null;\n};\nexport type LoginFormValuesType = {\n  email: string;\n  password: string;\n  rememberMe: boolean;\n  captcha: string | null;\n};\ntype LoginFormValuesTypeKeys = GetStringKeys<LoginFormValuesType>;\n","import React, { FC } from \"react\";\nimport style from \"./FormsControls.module.css\";\nimport { Field, WrappedFieldMetaProps, WrappedFieldProps } from \"redux-form\";\nimport { FieldValidatorType } from \"../../../utils/validators/validators\";\nimport TextArea from \"antd/es/input/TextArea\";\nimport { Input } from \"antd\";\n\ntype FormsControlsPropsType = {\n  meta: WrappedFieldMetaProps;\n  //   input: WrappedFieldInputProps;\n  //   // placeholder?: string;\n  //   // type?: HTMLInputTypeAttribute;\n  //   // autoFocus?: boolean;\n};\n\nconst FormControl: FC<FormsControlsPropsType> = ({ meta: { touched, error }, children }) => {\n  const hasError = touched && error;\n  return (\n    <div className={style.formControl + \" \" + (hasError ? style.error : \"\")}>\n      <div>{children}</div>\n      {hasError && <span>{error}</span>}\n    </div>\n  );\n};\n\nexport const MyTextarea: FC<WrappedFieldProps> = (props) => {\n  const { input, meta, ...restProps } = props;\n  return (\n    <FormControl {...props}>\n      <TextArea {...input} {...restProps} />\n    </FormControl>\n  );\n};\n\nexport const MyInput: FC<WrappedFieldProps> = (props) => {\n  const { input, meta, ...restProps } = props;\n  return (\n    <FormControl {...props}>\n      <Input {...input} {...restProps} />\n    </FormControl>\n  );\n};\n\nexport function createField<FormKeysType extends string>(\n  placeholder: string | undefined,\n  name: FormKeysType,\n  validators: FieldValidatorType[],\n  component: FC<WrappedFieldProps>,\n  props: any = {},\n  text: string = \"\"\n) {\n  return (\n    <>\n      <Field placeholder={placeholder} name={name} validate={validators} component={component} {...props} /> {text}\n    </>\n  );\n}\n","export type FieldValidatorType = (value: string) => string | undefined;\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n  if (value) return undefined;\r\n\r\n  return \"Field is required\";\r\n};\r\n\r\nexport const maxLengthCreator =\r\n  (maxLength: number): FieldValidatorType =>\r\n  (value) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n  };\r\n","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__iw5Wr\",\"error\":\"FormsControls_error__vUZR7\",\"formSummaryError\":\"FormsControls_formSummaryError__P7Ljl\"};"],"names":["LoginForm","handleSubmit","error","captchaUrl","onSubmit","createField","required","MyInput","type","undefined","src","alt","className","styleFormControls","LoginReduxForm","reduxForm","form","LoginPage","useSelector","state","auth","isAuth","dispatch","useDispatch","to","formData","login","email","password","rememberMe","captcha","FormControl","meta","touched","children","hasError","style","MyTextarea","props","input","restProps","placeholder","name","validators","component","text","validate","value","maxLengthCreator","maxLength","length"],"sourceRoot":""}