{"version":3,"file":"static/js/394.6a5026ea.chunk.js","mappings":"sRAWaA,EAAiG,SAAC,GAIxG,IAHLC,EAGI,EAHJA,aACAC,EAEI,EAFJA,MACAC,EACI,EADJA,WAEA,OACE,kBAAMC,SAAUH,EAAhB,WACGI,EAAAA,EAAAA,IAAqC,QAAS,QAAS,CAACC,EAAAA,GAAWC,EAAAA,KACnEF,EAAAA,EAAAA,IAAqC,WAAY,WAAY,CAACC,EAAAA,GAAWC,EAAAA,GAAS,CAAEC,KAAM,cAC1FH,EAAAA,EAAAA,SAAqCI,EAAW,aAAc,GAAIF,EAAAA,GAAS,CAAEC,KAAM,YAAc,eAEjGL,IAAc,gBAAKO,IAAKP,EAAYQ,IAAK,YACzCR,IAAcE,EAAAA,EAAAA,IAAqC,qBAAsB,UAAW,CAACC,EAAAA,GAAWC,EAAAA,GAAS,IAEzGL,IAAS,gBAAKU,UAAWC,EAAAA,EAAAA,iBAAhB,SAAqDX,KAE/D,0BACE,4CAMFY,GAAiBC,EAAAA,EAAAA,GAAmD,CAAEC,KAAM,SAA3DD,CAAsEf,GAEhFiB,EAAgB,WAC3B,IAAMd,GAAae,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKjB,cAC7DkB,GAASH,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKC,UACzDC,GAAWC,EAAAA,EAAAA,MAMjB,OAAIF,GACK,SAAC,KAAD,CAAUG,GAAI,cAIrB,4BACE,mCACA,SAACV,EAAD,CAAgBV,SAXH,SAACqB,GAChBH,GAASI,EAAAA,EAAAA,IAAMD,EAASE,MAAOF,EAASG,SAAUH,EAASI,WAAYJ,EAASK,WAU1C3B,WAAYA,S,8NCrChD4B,EAA0C,SAAC,GAA4C,IAAD,IAAzCC,KAAQC,EAAiC,EAAjCA,QAAS/B,EAAwB,EAAxBA,MAASgC,EAAe,EAAfA,SACrEC,EAAWF,GAAW/B,EAC5B,OACE,iBAAKU,UAAWwB,EAAAA,EAAAA,YAAoB,KAAOD,EAAWC,EAAAA,EAAAA,MAAc,IAApE,WACE,yBAAMF,IACLC,IAAY,0BAAOjC,QAKbmC,EAAoC,SAAAC,GAC/C,IAAQC,EAA8BD,EAA9BC,MAAgBC,GAAcF,EAAvBN,MAAf,OAAsCM,EAAtC,IACA,OACE,SAACP,GAAD,kBAAiBO,GAAjB,cACE,SAAC,KAAD,kBAAcC,GAAWC,QAKlBjC,EAAiC,SAAA+B,GAC5C,IAAQC,EAA8BD,EAA9BC,MAAgBC,GAAcF,EAAvBN,MAAf,OAAsCM,EAAtC,IACA,OACE,SAACP,GAAD,kBAAiBO,GAAjB,cACE,SAAC,KAAD,kBAAWC,GAAWC,QAKrB,SAASnC,EACdoC,EACAC,EACAC,EACAC,GAGC,IAFDN,EAEA,uDAFa,GACbO,EACA,uDADe,GAEf,OACE,iCACE,SAAC,KAAD,QAAOJ,YAAaA,EAAaC,KAAMA,EAAMI,SAAUH,EAAYC,UAAWA,GAAeN,IAD/F,IAC0GO,O,4ECnDvG,IAAMvC,EAA+B,SAAAyC,GAC1C,IAAIA,EAEJ,MAAO,qBAGIC,EACX,SAACC,GAAD,OACA,SAAAF,GACE,GAAIA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,mBCVlC,KAAgB,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB","sources":["components/Login/LoginPage.tsx","components/common/FormsControls/FormsControls.tsx","utils/validators/validators.ts","webpack://samurai-way/./src/components/common/FormsControls/FormsControls.module.css?eb50"],"sourcesContent":["import React, { FC } from 'react';\r\nimport styleFormControls from '../common/FormsControls/FormsControls.module.css';\r\nimport { InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { createField, MyInput } from '../common/FormsControls/FormsControls';\r\nimport { required } from '../../utils/validators/validators';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { login } from '../../redux/auth-reducer';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport { GetStringKeys } from '../../types/types';\r\n\r\nexport const LoginForm: FC<InjectedFormProps<LoginFormValuesType, LoginFormPropsType> & LoginFormPropsType> = ({\r\n  handleSubmit,\r\n  error,\r\n  captchaUrl,\r\n}) => {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      {createField<LoginFormValuesTypeKeys>('Email', 'email', [required], MyInput)}\r\n      {createField<LoginFormValuesTypeKeys>('Password', 'password', [required], MyInput, { type: 'password' })}\r\n      {createField<LoginFormValuesTypeKeys>(undefined, 'rememberMe', [], MyInput, { type: 'checkbox' }, 'Remember me')}\r\n\r\n      {captchaUrl && <img src={captchaUrl} alt={'captcha'} />}\r\n      {captchaUrl && createField<LoginFormValuesTypeKeys>('Symbols from image', 'captcha', [required], MyInput, {})}\r\n\r\n      {error && <div className={styleFormControls.formSummaryError}>{error}</div>}\r\n\r\n      <div>\r\n        <button>Login</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormPropsType>({ form: 'login' })(LoginForm);\r\n\r\nexport const LoginPage: FC = () => {\r\n  const captchaUrl = useSelector((state: AppStateType) => state.auth.captchaUrl);\r\n  const isAuth = useSelector((state: AppStateType) => state.auth.isAuth);\r\n  const dispatch = useDispatch();\r\n\r\n  const onSubmit = (formData: LoginFormValuesType) => {\r\n    dispatch(login(formData.email, formData.password, formData.rememberMe, formData.captcha));\r\n  };\r\n\r\n  if (isAuth) {\r\n    return <Redirect to={'/profile'} />;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Login</h1>\r\n      <LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl} />\r\n    </div>\r\n  );\r\n};\r\n\r\n// Types\r\ntype LoginFormPropsType = {\r\n  captchaUrl: string | null;\r\n};\r\nexport type LoginFormValuesType = {\r\n  email: string;\r\n  password: string;\r\n  rememberMe: boolean;\r\n  captcha: string | null;\r\n};\r\ntype LoginFormValuesTypeKeys = GetStringKeys<LoginFormValuesType>;\r\n","import React, { FC } from 'react';\r\nimport style from './FormsControls.module.css';\r\nimport { Field, WrappedFieldMetaProps, WrappedFieldProps } from 'redux-form';\r\nimport { FieldValidatorType } from '../../../utils/validators/validators';\r\nimport TextArea from 'antd/es/input/TextArea';\r\nimport { Input } from 'antd';\r\n\r\ntype FormsControlsPropsType = {\r\n  meta: WrappedFieldMetaProps;\r\n  //   input: WrappedFieldInputProps;\r\n  //   // placeholder?: string;\r\n  //   // type?: HTMLInputTypeAttribute;\r\n  //   // autoFocus?: boolean;\r\n};\r\n\r\nconst FormControl: FC<FormsControlsPropsType> = ({ meta: { touched, error }, children }) => {\r\n  const hasError = touched && error;\r\n  return (\r\n    <div className={style.formControl + ' ' + (hasError ? style.error : '')}>\r\n      <div>{children}</div>\r\n      {hasError && <span>{error}</span>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const MyTextarea: FC<WrappedFieldProps> = props => {\r\n  const { input, meta, ...restProps } = props;\r\n  return (\r\n    <FormControl {...props}>\r\n      <TextArea {...input} {...restProps} />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport const MyInput: FC<WrappedFieldProps> = props => {\r\n  const { input, meta, ...restProps } = props;\r\n  return (\r\n    <FormControl {...props}>\r\n      <Input {...input} {...restProps} />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport function createField<FormKeysType extends string>(\r\n  placeholder: string | undefined,\r\n  name: FormKeysType,\r\n  validators: FieldValidatorType[],\r\n  component: FC<WrappedFieldProps>,\r\n  props: any = {},\r\n  text: string = '',\r\n) {\r\n  return (\r\n    <>\r\n      <Field placeholder={placeholder} name={name} validate={validators} component={component} {...props} /> {text}\r\n    </>\r\n  );\r\n}\r\n","export type FieldValidatorType = (value: string) => string | undefined;\r\n\r\nexport const required: FieldValidatorType = value => {\r\n  if (value) return undefined;\r\n\r\n  return 'Field is required';\r\n};\r\n\r\nexport const maxLengthCreator =\r\n  (maxLength: number): FieldValidatorType =>\r\n  value => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n  };\r\n","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__iw5Wr\",\"error\":\"FormsControls_error__vUZR7\",\"formSummaryError\":\"FormsControls_formSummaryError__P7Ljl\"};"],"names":["LoginForm","handleSubmit","error","captchaUrl","onSubmit","createField","required","MyInput","type","undefined","src","alt","className","styleFormControls","LoginReduxForm","reduxForm","form","LoginPage","useSelector","state","auth","isAuth","dispatch","useDispatch","to","formData","login","email","password","rememberMe","captcha","FormControl","meta","touched","children","hasError","style","MyTextarea","props","input","restProps","placeholder","name","validators","component","text","validate","value","maxLengthCreator","maxLength","length"],"sourceRoot":""}