{"version":3,"file":"static/js/420.6e333eb7.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/common/Paginator/Paginator.module.css?6caa","components/common/Paginator/Paginator.tsx","webpack://samurai-way/./src/components/Users/users.module.css?9211","components/Users/User.tsx","redux/users-selectors.ts","components/Users/UsersSearchForm.tsx","components/Users/Users.tsx","components/Users/UsersContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"paginator\":\"Paginator_paginator__N-+GW\",\"pageNumber\":\"Paginator_pageNumber__eudIE\",\"selectedPage\":\"Paginator_selectedPage__xO3SK\"};","import React, { FC, useState } from \"react\";\r\nimport styles from \"./Paginator.module.css\";\r\nimport cn from \"classnames\";\r\n\r\ntype PropsType = {\r\n  totalItemsCount: number;\r\n  pageSize: number;\r\n  currentPage?: number;\r\n  onPageChanged?: (pageNumber: number) => void;\r\n  portionSize?: number;\r\n};\r\n\r\nexport const Paginator: FC<PropsType> = ({\r\n  totalItemsCount,\r\n  pageSize,\r\n  currentPage = 1,\r\n  onPageChanged = (x) => x,\r\n  portionSize = 10,\r\n}) => {\r\n  let pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n\r\n  let pages = [];\r\n  for (let i = 1; i <= pagesCount; i++) {\r\n    pages.push(i);\r\n  }\r\n\r\n  let portionCount = Math.ceil(pagesCount / portionSize);\r\n  let [portionNumber, setPortionNumber] = useState(1);\r\n  let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n  let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n  return (\r\n    <div className={styles.paginator}>\r\n      {currentPage !== 1 && (\r\n        <button\r\n          onClick={() => {\r\n            setPortionNumber(1);\r\n            onPageChanged(1);\r\n          }}\r\n        >\r\n          FIRST\r\n        </button>\r\n      )}\r\n\r\n      {portionNumber > 1 && (\r\n        <button\r\n          onClick={() => {\r\n            setPortionNumber(portionNumber - 1);\r\n          }}\r\n        >\r\n          PREV\r\n        </button>\r\n      )}\r\n\r\n      {pages\r\n        .filter((p) => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n        .map((p) => {\r\n          return (\r\n            <span\r\n              className={cn({ [styles.selectedPage]: currentPage === p }, styles.pageNumber)}\r\n              key={p}\r\n              onClick={() => {\r\n                onPageChanged(p);\r\n              }}\r\n            >\r\n              {p}\r\n            </span>\r\n          );\r\n        })}\r\n\r\n      {portionCount > portionNumber && (\r\n        <button\r\n          onClick={() => {\r\n            setPortionNumber(portionNumber + 1);\r\n          }}\r\n        >\r\n          NEXT\r\n        </button>\r\n      )}\r\n\r\n      {currentPage !== pagesCount && (\r\n        <button\r\n          onClick={() => {\r\n            setPortionNumber(portionCount);\r\n            onPageChanged(pagesCount);\r\n          }}\r\n        >\r\n          LAST\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"userPhoto\":\"users_userPhoto__zvIv+\"};","import React, { FC } from \"react\";\r\nimport styles from \"./users.module.css\";\r\nimport userPhoto from \"../../assets/images/user.png\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { UserType } from \"../../types/types\";\r\n\r\nexport type PropsType = {\r\n  user: UserType;\r\n  followingInProgress: number[];\r\n  follow: (userId: number) => void;\r\n  unfollow: (userId: number) => void;\r\n};\r\n\r\nexport const User: FC<PropsType> = ({ user, followingInProgress, unfollow, follow }) => {\r\n  return (\r\n    <div>\r\n      <span>\r\n        <div>\r\n          <NavLink to={\"/profile/\" + user.id}>\r\n            <img\r\n              src={user.photos.small !== null ? user.photos.small : userPhoto}\r\n              className={styles.userPhoto}\r\n              alt={\"userPhoto\"}\r\n            />\r\n          </NavLink>\r\n        </div>\r\n        <div>\r\n          {user.followed ? (\r\n            <button\r\n              disabled={followingInProgress.some((id) => id === user.id)}\r\n              onClick={() => {\r\n                unfollow(user.id);\r\n              }}\r\n            >\r\n              Unfollow\r\n            </button>\r\n          ) : (\r\n            <button\r\n              disabled={followingInProgress.some((id) => id === user.id)}\r\n              onClick={() => {\r\n                follow(user.id);\r\n              }}\r\n            >\r\n              Follow\r\n            </button>\r\n          )}\r\n        </div>\r\n      </span>\r\n      <span>\r\n        <span>\r\n          <div>{user.name}</div>\r\n          <div>{user.status}</div>\r\n        </span>\r\n        <span>\r\n          <div>{\"user.location.country\"}</div>\r\n          <div>{\"user.location.city\"}</div>\r\n        </span>\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n","import { AppStateType } from \"./redux-store\";\nimport { UserType } from \"../types/types\";\n\nexport const getUsers = (state: AppStateType): UserType[] => {\n  return state.usersPage.users;\n};\n\n//пример использования и типизации мемоизированного селектора (для сложных вычисляемых селекторов)\n// export const getUsersFilter  = createSelector<[Selector<AppStateType, UserType[]>], UserType[]>(getUsers, (users) => {\n//    return users.filter(elem => true)\n// });\n\nexport const getPageSize = (state: AppStateType) => {\n  return state.usersPage.pageSize;\n};\nexport const getCurrentPage = (state: AppStateType) => {\n  return state.usersPage.currentPage;\n};\nexport const getTotalUsersCount = (state: AppStateType) => {\n  return state.usersPage.totalUsersCount;\n};\nexport const getIsFetching = (state: AppStateType) => {\n  return state.usersPage.isFetching;\n};\nexport const getFollowingInProgress = (state: AppStateType) => {\n  return state.usersPage.followingInProgress;\n};\nexport const getUsersFilter = (state: AppStateType) => {\n  return state.usersPage.filter;\n};\n","import { Field, Form, Formik } from \"formik\";\nimport React from \"react\";\nimport { FilterType } from \"../../redux/users-reducer\";\nimport { useSelector } from \"react-redux\";\nimport { getUsersFilter } from \"../../redux/users-selectors\";\n\nconst usersSearchFormValidate = (values: any) => {\n  const errors = {};\n  return errors;\n};\n\ntype FriendFormType = \"true\" | \"false\" | \"null\";\n\ntype FormType = {\n  term: string;\n  friend: \"true\" | \"false\" | \"null\";\n};\n\ntype PropsType = {\n  onFilterChanged: (filter: FilterType) => void;\n};\n\nexport const UsersSearchForm: React.FC<PropsType> = React.memo((props) => {\n  const filter = useSelector(getUsersFilter);\n  const submit = (values: FormType, { setSubmitting }: { setSubmitting: (isSubmitting: boolean) => void }) => {\n    const filter: FilterType = {\n      term: values.term,\n      friend: values.friend === \"null\" ? null : values.friend === \"true\",\n    };\n\n    props.onFilterChanged(filter);\n    setSubmitting(false);\n  };\n\n  return (\n    <div>\n      <Formik\n        enableReinitialize\n        initialValues={{ term: filter.term, friend: String(filter.friend) as FriendFormType }}\n        validate={usersSearchFormValidate}\n        onSubmit={submit}\n      >\n        {({ isSubmitting }) => (\n          <Form>\n            <Field type=\"text\" name=\"term\" />\n\n            <Field name=\"friend\" as=\"select\">\n              <option value=\"null\">All</option>\n              <option value=\"true\">Only followed</option>\n              <option value=\"false\">Only unfollowed</option>\n            </Field>\n            <button type=\"submit\" disabled={isSubmitting}>\n              Find\n            </button>\n          </Form>\n        )}\n      </Formik>\n    </div>\n  );\n});\n","import React, { FC, useEffect } from \"react\";\nimport { Paginator } from \"../common/Paginator/Paginator\";\nimport { User } from \"./User\";\nimport { UserType } from \"../../types/types\";\nimport { useHistory } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { FilterType, follow, requestUsers, unfollow } from \"../../redux/users-reducer\";\nimport {\n  getCurrentPage,\n  getFollowingInProgress,\n  getPageSize,\n  getTotalUsersCount,\n  getUsers,\n  getUsersFilter,\n} from \"../../redux/users-selectors\";\nimport { UsersSearchForm } from \"./UsersSearchForm\";\nimport * as queryString from \"querystring\";\n\nexport const Users: FC<PropsType> = () => {\n  const users = useSelector(getUsers);\n  const totalUsersCount = useSelector(getTotalUsersCount);\n  const currentPage = useSelector(getCurrentPage);\n  const pageSize = useSelector(getPageSize);\n  const filter = useSelector(getUsersFilter);\n  const followingInProgress = useSelector(getFollowingInProgress);\n\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  useEffect(() => {\n    const parsed = queryString.parse(history.location.search.substr(1)) as QueryParamsType;\n\n    let actualPage = currentPage;\n    let actualFilter = filter;\n\n    if (!!parsed.page) actualPage = Number(parsed.page);\n    if (!!parsed.term) actualFilter = { ...actualFilter, term: parsed.term as string };\n\n    switch (parsed.friend) {\n      case \"null\":\n        actualFilter = { ...actualFilter, friend: null };\n        break;\n      case \"true\":\n        actualFilter = { ...actualFilter, friend: true };\n        break;\n      case \"false\":\n        actualFilter = { ...actualFilter, friend: false };\n        break;\n    }\n\n    dispatch(requestUsers(actualPage, pageSize, actualFilter));\n  }, []);\n\n  useEffect(() => {\n    const query: QueryParamsType = {};\n\n    if (!!filter.term) query.term = filter.term;\n    if (filter.friend !== null) query.friend = String(filter.friend);\n    if (currentPage !== 1) query.page = String(currentPage);\n\n    history.push({\n      pathname: \"/developers\",\n      search: queryString.stringify(query),\n    });\n  }, [filter, currentPage]);\n\n  const onPageChanged = (pageNumber: number) => {\n    dispatch(requestUsers(pageNumber, pageSize, filter));\n  };\n  const onFilterChanged = (filter: FilterType) => {\n    dispatch(requestUsers(1, pageSize, filter));\n  };\n  const followUser = (userId: number) => {\n    dispatch(follow(userId));\n  };\n  const unfollowUser = (userId: number) => {\n    dispatch(unfollow(userId));\n  };\n\n  return (\n    <div>\n      <UsersSearchForm onFilterChanged={onFilterChanged} />\n      <Paginator\n        currentPage={currentPage}\n        onPageChanged={onPageChanged}\n        totalItemsCount={totalUsersCount}\n        pageSize={pageSize}\n      />\n      <div>\n        {users.map((u: UserType) => (\n          <User\n            key={u.id}\n            user={u}\n            followingInProgress={followingInProgress}\n            follow={followUser}\n            unfollow={unfollowUser}\n          />\n        ))}\n      </div>\n      <Paginator\n        currentPage={currentPage}\n        onPageChanged={onPageChanged}\n        totalItemsCount={totalUsersCount}\n        pageSize={pageSize}\n      />\n    </div>\n  );\n};\n\n// Types\ntype PropsType = {};\ntype QueryParamsType = { term?: string; page?: string; friend?: string };\n","import { useSelector } from \"react-redux\";\nimport React from \"react\";\nimport { Users } from \"./Users\";\nimport { Preloader } from \"../common/Preloader/Preloader\";\nimport { getIsFetching } from \"../../redux/users-selectors\";\n\ntype UsersPagePropsType = {\n  pageTitle: string;\n};\n\nexport const UsersPage: React.FC<UsersPagePropsType> = ({ pageTitle }) => {\n  const isFetching = useSelector(getIsFetching);\n\n  return (\n    <>\n      <h2>{pageTitle}</h2>\n      {isFetching ? <Preloader /> : null}\n      <Users />\n    </>\n  );\n};\n"],"names":["Paginator","totalItemsCount","pageSize","currentPage","onPageChanged","x","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","className","styles","onClick","filter","p","map","cn","User","user","followingInProgress","unfollow","follow","to","id","src","photos","small","userPhoto","alt","followed","disabled","some","name","status","getUsers","state","usersPage","users","getPageSize","getCurrentPage","getTotalUsersCount","totalUsersCount","getIsFetching","isFetching","getFollowingInProgress","getUsersFilter","usersSearchFormValidate","values","UsersSearchForm","React","props","useSelector","enableReinitialize","initialValues","term","friend","String","validate","onSubmit","setSubmitting","onFilterChanged","isSubmitting","type","as","value","Users","dispatch","useDispatch","history","useHistory","useEffect","parsed","queryString","location","search","substr","actualPage","actualFilter","page","Number","requestUsers","query","pathname","pageNumber","followUser","userId","unfollowUser","u","UsersPage","pageTitle","Preloader"],"sourceRoot":""}