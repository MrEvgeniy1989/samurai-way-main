{"version":3,"file":"static/js/420.cb8a277d.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/common/Paginator/Paginator.module.css?6caa","components/common/Paginator/Paginator.tsx","webpack://samurai-way/./src/components/Users/users.module.css?9211","components/Users/User.tsx","redux/users-selectors.ts","components/Users/UsersSearchForm.tsx","components/Users/Users.tsx","components/Users/UsersContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"paginator\":\"Paginator_paginator__N-+GW\",\"pageNumber\":\"Paginator_pageNumber__eudIE\",\"selectedPage\":\"Paginator_selectedPage__xO3SK\"};","import React, { FC, useState } from 'react';\r\nimport styles from './Paginator.module.css';\r\nimport cn from 'classnames';\r\n\r\ntype PropsType = {\r\n  totalItemsCount: number;\r\n  pageSize: number;\r\n  currentPage?: number;\r\n  onPageChanged?: (pageNumber: number) => void;\r\n  portionSize?: number;\r\n};\r\n\r\nexport const Paginator: FC<PropsType> = ({\r\n  totalItemsCount,\r\n  pageSize,\r\n  currentPage = 1,\r\n  onPageChanged = x => x,\r\n  portionSize = 10,\r\n}) => {\r\n  let pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n\r\n  let pages = [];\r\n  for (let i = 1; i <= pagesCount; i++) {\r\n    pages.push(i);\r\n  }\r\n\r\n  let portionCount = Math.ceil(pagesCount / portionSize);\r\n  let [portionNumber, setPortionNumber] = useState(1);\r\n  let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n  let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n  return (\r\n    <div className={styles.paginator}>\r\n      {currentPage !== 1 && (\r\n        <button\r\n          onClick={() => {\r\n            setPortionNumber(1);\r\n            onPageChanged(1);\r\n          }}\r\n        >\r\n          FIRST\r\n        </button>\r\n      )}\r\n\r\n      {portionNumber > 1 && (\r\n        <button\r\n          onClick={() => {\r\n            setPortionNumber(portionNumber - 1);\r\n          }}\r\n        >\r\n          PREV\r\n        </button>\r\n      )}\r\n\r\n      {pages\r\n        .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n        .map(p => {\r\n          return (\r\n            <span\r\n              className={cn({ [styles.selectedPage]: currentPage === p }, styles.pageNumber)}\r\n              key={p}\r\n              onClick={() => {\r\n                onPageChanged(p);\r\n              }}\r\n            >\r\n              {p}\r\n            </span>\r\n          );\r\n        })}\r\n\r\n      {portionCount > portionNumber && (\r\n        <button\r\n          onClick={() => {\r\n            setPortionNumber(portionNumber + 1);\r\n          }}\r\n        >\r\n          NEXT\r\n        </button>\r\n      )}\r\n\r\n      {currentPage !== pagesCount && (\r\n        <button\r\n          onClick={() => {\r\n            setPortionNumber(portionCount);\r\n            onPageChanged(pagesCount);\r\n          }}\r\n        >\r\n          LAST\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"userPhoto\":\"users_userPhoto__zvIv+\"};","import React, { FC } from 'react';\r\nimport styles from './users.module.css';\r\nimport userPhoto from '../../assets/images/user.png';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { UserType } from '../../types/types';\r\n\r\nexport type PropsType = {\r\n  user: UserType;\r\n  followingInProgress: number[];\r\n  follow: (userId: number) => void;\r\n  unfollow: (userId: number) => void;\r\n};\r\n\r\nexport const User: FC<PropsType> = ({ user, followingInProgress, unfollow, follow }) => {\r\n  return (\r\n    <div>\r\n      <span>\r\n        <div>\r\n          <NavLink to={'/profile/' + user.id}>\r\n            <img\r\n              src={user.photos.small !== null ? user.photos.small : userPhoto}\r\n              className={styles.userPhoto}\r\n              alt={'userPhoto'}\r\n            />\r\n          </NavLink>\r\n        </div>\r\n        <div>\r\n          {user.followed ? (\r\n            <button\r\n              disabled={followingInProgress.some(id => id === user.id)}\r\n              onClick={() => {\r\n                unfollow(user.id);\r\n              }}\r\n            >\r\n              Unfollow\r\n            </button>\r\n          ) : (\r\n            <button\r\n              disabled={followingInProgress.some(id => id === user.id)}\r\n              onClick={() => {\r\n                follow(user.id);\r\n              }}\r\n            >\r\n              Follow\r\n            </button>\r\n          )}\r\n        </div>\r\n      </span>\r\n      <span>\r\n        <span>\r\n          <div>{user.name}</div>\r\n          <div>{user.status}</div>\r\n        </span>\r\n        <span>\r\n          <div>{'user.location.country'}</div>\r\n          <div>{'user.location.city'}</div>\r\n        </span>\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n","import { AppStateType } from './redux-store';\r\nimport { UserType } from '../types/types';\r\n\r\nexport const getUsers = (state: AppStateType): UserType[] => {\r\n  return state.usersPage.users;\r\n};\r\n\r\n//пример использования и типизации мемоизированного селектора (для сложных вычисляемых селекторов)\r\n// export const getUsersFilter  = createSelector<[Selector<AppStateType, UserType[]>], UserType[]>(getUsers, (users) => {\r\n//    return users.filter(elem => true)\r\n// });\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n  return state.usersPage.pageSize;\r\n};\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n  return state.usersPage.currentPage;\r\n};\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n  return state.usersPage.totalUsersCount;\r\n};\r\nexport const getIsFetching = (state: AppStateType) => {\r\n  return state.usersPage.isFetching;\r\n};\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n  return state.usersPage.followingInProgress;\r\n};\r\nexport const getUsersFilter = (state: AppStateType) => {\r\n  return state.usersPage.filter;\r\n};\r\n","import { Field, Form, Formik } from 'formik';\r\nimport React from 'react';\r\nimport { FilterType } from '../../redux/users-reducer';\r\nimport { useSelector } from 'react-redux';\r\nimport { getUsersFilter } from '../../redux/users-selectors';\r\n\r\nconst usersSearchFormValidate = () => {\r\n  // const errors = {};\r\n  // return errors;\r\n};\r\n\r\ntype FriendFormType = 'true' | 'false' | 'null';\r\n\r\ntype FormType = {\r\n  term: string;\r\n  friend: 'true' | 'false' | 'null';\r\n};\r\n\r\ntype PropsType = {\r\n  onFilterChanged: (filter: FilterType) => void;\r\n};\r\n\r\nexport const UsersSearchForm: React.FC<PropsType> = React.memo(props => {\r\n  const filter = useSelector(getUsersFilter);\r\n  const submit = (values: FormType, { setSubmitting }: { setSubmitting: (isSubmitting: boolean) => void }) => {\r\n    const filter: FilterType = {\r\n      term: values.term,\r\n      friend: values.friend === 'null' ? null : values.friend === 'true',\r\n    };\r\n\r\n    props.onFilterChanged(filter);\r\n    setSubmitting(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Formik\r\n        enableReinitialize\r\n        initialValues={{ term: filter.term, friend: String(filter.friend) as FriendFormType }}\r\n        validate={usersSearchFormValidate}\r\n        onSubmit={submit}\r\n      >\r\n        {({ isSubmitting }) => (\r\n          <Form>\r\n            <Field type=\"text\" name=\"term\" />\r\n\r\n            <Field name=\"friend\" as=\"select\">\r\n              <option value=\"null\">All</option>\r\n              <option value=\"true\">Only followed</option>\r\n              <option value=\"false\">Only unfollowed</option>\r\n            </Field>\r\n            <button type=\"submit\" disabled={isSubmitting}>\r\n              Find\r\n            </button>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </div>\r\n  );\r\n});\r\n","import React, { FC, useEffect } from 'react';\r\nimport { Paginator } from '../common/Paginator/Paginator';\r\nimport { User } from './User';\r\nimport { UserType } from '../../types/types';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { FilterType, follow, requestUsers, unfollow } from '../../redux/users-reducer';\r\nimport {\r\n  getCurrentPage,\r\n  getFollowingInProgress,\r\n  getPageSize,\r\n  getTotalUsersCount,\r\n  getUsers,\r\n  getUsersFilter,\r\n} from '../../redux/users-selectors';\r\nimport { UsersSearchForm } from './UsersSearchForm';\r\nimport * as queryString from 'querystring';\r\n\r\nexport const Users: FC<PropsType> = () => {\r\n  const users = useSelector(getUsers);\r\n  const totalUsersCount = useSelector(getTotalUsersCount);\r\n  const currentPage = useSelector(getCurrentPage);\r\n  const pageSize = useSelector(getPageSize);\r\n  const filter = useSelector(getUsersFilter);\r\n  const followingInProgress = useSelector(getFollowingInProgress);\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const parsed = queryString.parse(history.location.search.substr(1)) as QueryParamsType;\r\n\r\n    let actualPage = currentPage;\r\n    let actualFilter = filter;\r\n\r\n    if (!!parsed.page) actualPage = Number(parsed.page);\r\n    if (!!parsed.term) actualFilter = { ...actualFilter, term: parsed.term as string };\r\n\r\n    switch (parsed.friend) {\r\n      case 'null':\r\n        actualFilter = { ...actualFilter, friend: null };\r\n        break;\r\n      case 'true':\r\n        actualFilter = { ...actualFilter, friend: true };\r\n        break;\r\n      case 'false':\r\n        actualFilter = { ...actualFilter, friend: false };\r\n        break;\r\n    }\r\n\r\n    dispatch(requestUsers(actualPage, pageSize, actualFilter));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const query: QueryParamsType = {};\r\n\r\n    if (!!filter.term) query.term = filter.term;\r\n    if (filter.friend !== null) query.friend = String(filter.friend);\r\n    if (currentPage !== 1) query.page = String(currentPage);\r\n\r\n    history.push({\r\n      pathname: '/developers',\r\n      search: queryString.stringify(query),\r\n    });\r\n  }, [filter, currentPage]);\r\n\r\n  const onPageChanged = (pageNumber: number) => {\r\n    dispatch(requestUsers(pageNumber, pageSize, filter));\r\n  };\r\n  const onFilterChanged = (filter: FilterType) => {\r\n    dispatch(requestUsers(1, pageSize, filter));\r\n  };\r\n  const followUser = (userId: number) => {\r\n    dispatch(follow(userId));\r\n  };\r\n  const unfollowUser = (userId: number) => {\r\n    dispatch(unfollow(userId));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <UsersSearchForm onFilterChanged={onFilterChanged} />\r\n      <Paginator\r\n        currentPage={currentPage}\r\n        onPageChanged={onPageChanged}\r\n        totalItemsCount={totalUsersCount}\r\n        pageSize={pageSize}\r\n      />\r\n      <div>\r\n        {users.map((u: UserType) => (\r\n          <User\r\n            key={u.id}\r\n            user={u}\r\n            followingInProgress={followingInProgress}\r\n            follow={followUser}\r\n            unfollow={unfollowUser}\r\n          />\r\n        ))}\r\n      </div>\r\n      <Paginator\r\n        currentPage={currentPage}\r\n        onPageChanged={onPageChanged}\r\n        totalItemsCount={totalUsersCount}\r\n        pageSize={pageSize}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\n// Types\r\ntype PropsType = {};\r\ntype QueryParamsType = { term?: string; page?: string; friend?: string };\r\n","import { useSelector } from 'react-redux';\r\nimport React from 'react';\r\nimport { Users } from './Users';\r\nimport { Preloader } from '../common/Preloader/Preloader';\r\nimport { getIsFetching } from '../../redux/users-selectors';\r\n\r\ntype UsersPagePropsType = {\r\n  pageTitle: string;\r\n};\r\n\r\nexport const UsersPage: React.FC<UsersPagePropsType> = ({ pageTitle }) => {\r\n  const isFetching = useSelector(getIsFetching);\r\n\r\n  return (\r\n    <>\r\n      <h2>{pageTitle}</h2>\r\n      {isFetching ? <Preloader /> : null}\r\n      <Users />\r\n    </>\r\n  );\r\n};\r\n"],"names":["Paginator","totalItemsCount","pageSize","currentPage","onPageChanged","x","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","className","styles","onClick","filter","p","map","cn","User","user","followingInProgress","unfollow","follow","to","id","src","photos","small","userPhoto","alt","followed","disabled","some","name","status","getUsers","state","usersPage","users","getPageSize","getCurrentPage","getTotalUsersCount","totalUsersCount","getIsFetching","isFetching","getFollowingInProgress","getUsersFilter","usersSearchFormValidate","UsersSearchForm","React","props","useSelector","enableReinitialize","initialValues","term","friend","String","validate","onSubmit","values","setSubmitting","onFilterChanged","isSubmitting","type","as","value","Users","dispatch","useDispatch","history","useHistory","useEffect","parsed","queryString","location","search","substr","actualPage","actualFilter","page","Number","requestUsers","query","pathname","pageNumber","followUser","userId","unfollowUser","u","UsersPage","pageTitle","Preloader"],"sourceRoot":""}