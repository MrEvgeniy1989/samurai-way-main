{"version":3,"file":"static/js/44.e0e4e7ea.chunk.js","mappings":"sMACA,EAAwB,qB,sFCkBXA,EAAsE,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,aAAcC,EAAW,EAAXA,MAC/F,OACI,kBAAMC,SAAUF,EAAhB,WACKG,EAAAA,EAAAA,IAAY,QAAS,QAAS,CAACC,EAAAA,GAAWC,EAAAA,KAC1CF,EAAAA,EAAAA,IAAY,WAAY,WAAY,CAACC,EAAAA,GAAWC,EAAAA,GAAO,CAACC,KAAM,cAC9DH,EAAAA,EAAAA,IAAY,KAAM,aAAc,GAAIE,EAAAA,GAAO,CAACC,KAAM,YAAa,gBAEhE,4BACI,SAACC,EAAA,EAAD,CAAOC,UAAWH,EAAAA,GACXI,KAAM,aACNH,KAAK,aAHhB,kBAOCL,IAAS,gBAAKS,UAAWC,EAAAA,EAAAA,iBAAhB,SAAqDV,KAE/D,0BACI,4CAOVW,GAAiBC,EAAAA,EAAAA,GAAwB,CAACC,KAAM,SAA/BD,CAAyCd,GA+BhE,GAAegB,EAAAA,EAAAA,KAtBS,SAACC,GAAD,MAA0B,CAC9CC,OAAQD,EAAME,KAAKD,UAqBiB,CAACE,MAAAA,EAAAA,IAAzC,EAlBkC,SAACC,GAM/B,OAAIA,EAAMH,QACC,SAAC,KAAD,CAAUI,GAAI,cAIrB,iBAAKX,UAAWY,EAAhB,WACI,mCACA,SAACV,EAAD,CAAgBV,SAXP,SAACqB,GACdH,EAAMD,MAAMI,EAASC,MAAOD,EAASE,SAAUF,EAASG,sB,2MC/C1DC,EAA0C,SAAC,GAAwC,IAAD,IAAtCC,KAAOC,EAA+B,EAA/BA,QAAS5B,EAAsB,EAAtBA,MAAQ6B,EAAc,EAAdA,SAChEC,EAAWF,GAAW5B,EAC5B,OACI,iBAAKS,UAAWY,EAAAA,EAAAA,YAAoB,KAAOS,EAAWT,EAAAA,EAAAA,MAAc,IAApE,WACI,yBACKQ,IAEJC,IAAY,0BAAO9B,QAKnB+B,EAAuC,SAACZ,GACjD,IAAOa,EAA6Bb,EAA7Ba,MAAgBC,GAAad,EAAtBQ,MAAd,OAAoCR,EAApC,IACA,OAAO,SAACO,GAAD,kBAAiBP,GAAjB,cAAyB,uCAAca,GAAWC,QAGhD7B,EAAoC,SAACe,GAC9C,IAAOa,EAA6Bb,EAA7Ba,MAAgBC,GAAad,EAAtBQ,MAAd,OAAoCR,EAApC,IACA,OAAO,SAACO,GAAD,kBAAiBP,GAAjB,cAAyB,oCAAWa,GAAWC,QAG7C/B,EAAc,SAACgC,EAA4B1B,EAAc2B,EAAiB5B,GAA5D,IAAmGY,EAAnG,uDAAgH,GAAIiB,EAApH,uDAAmI,GAAnI,OACvB,4BACI,SAAC,KAAD,QAAOF,YAAaA,EACb1B,KAAMA,EACN6B,SAAUF,EACV5B,UAAWA,GACPY,IALf,IAMQiB,O,4ECzCL,IAAMjC,EAAW,SAACmC,GACvB,IAAIA,EAEJ,MAAO,qBAGIC,EAAmB,SAACC,GAAD,OAAuB,SAACF,GACtD,GAAIA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,mBCNhC,KAAgB,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB","sources":["webpack://samurai-way/./src/components/Login/Login.module.css?3530","components/Login/Login.tsx","components/common/FormsControls/FormsControls.tsx","utils/validators/validators.ts","webpack://samurai-way/./src/components/common/FormsControls/FormsControls.module.css?eb50"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"login\":\"Login_login__gLYMb\"};","import React, {FC} from 'react';\r\nimport style from './Login.module.css'\r\nimport styleFormControls from '../common/FormsControls/FormsControls.module.css'\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {createField, Input} from '../common/FormsControls/FormsControls';\r\nimport {required} from '../../utils/validators/validators';\r\nimport {connect} from 'react-redux';\r\nimport {login} from '../../redux/auth-reducer';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {AppStateType} from '../../redux/redux-store';\r\n\r\ntype LoginFormPropsType = {}\r\n\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nexport const LoginForm: FC<InjectedFormProps<FormDataType> & LoginFormPropsType> = ({handleSubmit, error}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {createField('Email', 'email', [required], Input)}\r\n            {createField('Password', 'password', [required], Input, {type: 'password'})}\r\n            {createField(null, 'rememberMe', [], Input, {type: 'checkbox'}, 'Remember me')}\r\n\r\n            <div>\r\n                <Field component={Input}\r\n                       name={'rememberMe'}\r\n                       type=\"checkbox\"\r\n                /> Remember me\r\n            </div>\r\n\r\n            {error && <div className={styleFormControls.formSummaryError}>{error}</div>}\r\n\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType>({form: 'login'})(LoginForm)\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchToPropsType = { login: (email: string, password: string, rememberMe: boolean) => void }\r\ntype LoginPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nconst Login: FC<LoginPropsType> = (props) => {\r\n\r\n    const onSubmit = (formData: FormDataType) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe)\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n\r\n    return (\r\n        <div className={style.login}>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps, {login})(Login)\r\n","import React, {FC, HTMLInputTypeAttribute} from 'react';\r\nimport style from './FormsControls.module.css'\r\nimport {Field, WrappedFieldInputProps, WrappedFieldMetaProps} from 'redux-form';\r\n\r\ntype FormsControlsPropsType = {\r\n    input: WrappedFieldInputProps\r\n    meta: WrappedFieldMetaProps\r\n    placeholder?: string\r\n    type?: HTMLInputTypeAttribute\r\n    autoFocus?: boolean\r\n}\r\n\r\nconst FormControl: FC<FormsControlsPropsType> = ({meta: {touched, error}, children}) => {\r\n    const hasError = touched && error\r\n    return (\r\n        <div className={style.formControl + ' ' + (hasError ? style.error : '')}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea: FC<FormsControlsPropsType> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    return <FormControl {...props} ><textarea {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const Input: FC<FormsControlsPropsType> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    return <FormControl {...props} ><input {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const createField = (placeholder: string | null, name: string, validators: any, component: FC<FormsControlsPropsType>, props: any = {}, text: string = '') => (\r\n    <div>\r\n        <Field placeholder={placeholder}\r\n               name={name}\r\n               validate={validators}\r\n               component={component}\r\n               {...props}\r\n        /> {text}\r\n    </div>\r\n)","export const required = (value: string) => {\r\n  if (value) return undefined\r\n\r\n  return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n  if (value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n  return undefined\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__iw5Wr\",\"error\":\"FormsControls_error__vUZR7\",\"formSummaryError\":\"FormsControls_formSummaryError__P7Ljl\"};"],"names":["LoginForm","handleSubmit","error","onSubmit","createField","required","Input","type","Field","component","name","className","styleFormControls","LoginReduxForm","reduxForm","form","connect","state","isAuth","auth","login","props","to","style","formData","email","password","rememberMe","FormControl","meta","touched","children","hasError","Textarea","input","restProps","placeholder","validators","text","validate","value","maxLengthCreator","maxLength","length"],"sourceRoot":""}