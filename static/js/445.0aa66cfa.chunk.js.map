{"version":3,"file":"static/js/445.0aa66cfa.chunk.js","mappings":"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","sources":["components/Profile/Profile.module.css","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/common/FormsControls/FormsControls.tsx","utils/validators/validators.ts","webpack://samurai-way/./src/components/common/FormsControls/FormsControls.module.css?eb50","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {\"profileInfoImg\":\"ProfileInfo_profileInfoImg__N4d5K\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__UU8E7\",\"mainPhoto\":\"ProfileInfo_mainPhoto__moSds\",\"fileInput\":\"ProfileInfo_fileInput__5GOXw\"};","import React, {ChangeEvent, FC, useEffect, useState} from \"react\";\r\n\r\ntype ProfileStatusWithHooksPropsType = {\r\n  status: string\r\n  updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusWithHooks: FC<ProfileStatusWithHooksPropsType> = ({status, updateStatus}) => {\r\n\r\n  const [editMode, setEditMode] = useState<boolean>(false)\r\n  const [newStatus, setNewStatus] = useState<string>(status)\r\n\r\n  useEffect(() => {\r\n    if (status !== newStatus)\r\n      setNewStatus(status)\r\n  }, [status])\r\n\r\n  const deActivateEditMode = () => {\r\n    setEditMode(false)\r\n    updateStatus(newStatus)\r\n  }\r\n  const activateEditMode = () => {\r\n    setEditMode(true)\r\n  }\r\n  const onStatusChange = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n    setNewStatus(e.currentTarget.value)\r\n  }\r\n  return (\r\n    <div>\r\n      Status:\r\n      {\r\n        !editMode\r\n          ? <div>\r\n            <span onDoubleClick={activateEditMode}>{status || '---'}</span>\r\n          </div>\r\n          : <div>\r\n            <input onChange={onStatusChange} value={newStatus} onBlur={deActivateEditMode} autoFocus/>\r\n          </div>\r\n      }\r\n    </div>\r\n  )\r\n}","import React, {FC} from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport {ProfileType} from '../../../redux/profile-reducer';\r\nimport {Preloader} from '../../common/Preloader/Preloader';\r\nimport {ProfileStatusWithHooks} from './ProfileStatusWithHooks';\r\nimport userPhoto from './../../../assets/images/user.png'\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (photoFile: File) => void\r\n}\r\n\r\nexport const ProfileInfo: FC<ProfileInfoPropsType> = ({profile, status, updateStatus, isOwner, savePhoto}) => {\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={profile.photos?.large || userPhoto} alt={'Avatar'} className={s.mainPhoto}/>\r\n                {isOwner && <input type=\"file\" className={s.fileInput} onChange={onMainPhotoSelected}/>}\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__UQGsK\",\"posts\":\"MyPosts_posts__eHHT8\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__3RAd4\"};","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\ntype PostPropsType = {\r\n    message: String;\r\n    likesCount: number;\r\n}\r\n\r\nconst Post: React.FC<PostPropsType> = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://365psd.com/images/istock/previews/9730/97305669-avatar-icon-of-girl-in-a-baseball-cap.jpg\"\r\n                 alt=\"avatar_icon\"/>\r\n            {props.message}\r\n            <div>\r\n                <span>like</span>{props.likesCount}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;","import React, {FC} from 'react';\r\nimport style from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {MyPostsPropsType} from './MyPostsContainer';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {maxLengthCreator, required} from '../../../utils/validators/validators';\r\nimport {Textarea} from '../../common/FormsControls/FormsControls';\r\n\r\nexport const MyPosts = (props: MyPostsPropsType) => {\r\n\r\n    // shouldComponentUpdate(nextProps: Readonly<MyPostsPropsType>, nextState: Readonly<{}>, nextContext: any): boolean {\r\n    //     return nextProps !== this.props || nextState !== this.state\r\n    // }\r\n\r\n    let postsElements = [...props.posts].reverse().map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount}/>)\r\n\r\n    const onAddPost = (formData: FormDataType) => {\r\n        props.addPost(formData.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={style.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n            <div className={style.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\ntype AddNewPostFormPropsType = {}\r\n\r\ntype FormDataType = {\r\n    newPostText: string\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nlet AddNewPostForm: FC<InjectedFormProps<FormDataType> & AddNewPostFormPropsType> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name={'newPostText'} component={Textarea} placeholder={'Post message'}\r\n                       validate={[required, maxLength10]}/>\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nlet AddNewPostFormRedux = reduxForm<FormDataType>({form: 'ProfileAddNewPostForm'})(AddNewPostForm)","import React from 'react';\r\nimport {addPostActionCreator, PostDataType} from '../../../redux/profile-reducer';\r\nimport {MyPosts} from './MyPosts';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../../redux/redux-store';\r\nimport {Dispatch} from 'redux';\r\n\r\ntype MapStateToPropsType = {\r\n        posts: PostDataType[]\r\n}\r\ntype MapDispatchToPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\nexport type MyPostsPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        addPost: (newPostText: string) => {dispatch(addPostActionCreator(newPostText))}\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)","import React from 'react';\r\nimport s from './Profile.module.css';\r\nimport {ProfileInfo} from './ProfileInfo/ProfileInfo';\r\nimport {MyPostsContainer} from './MyPosts/MyPostsContainer';\r\nimport {ProfileType} from '../../redux/profile-reducer';\r\n\r\ntype ProfilePropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n}\r\n\r\nexport const Profile = (props: ProfilePropsType) => {\r\n    return (\r\n        <div className={s.profile}>\r\n            <ProfileInfo savePhoto={props.savePhoto} isOwner={props.isOwner} profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n\r\n    );\r\n}","import React, {ComponentType} from 'react';\r\nimport {Profile} from './Profile';\r\nimport {connect} from 'react-redux';\r\nimport {getStatus, getUserProfile, ProfileType, savePhoto, updateStatus} from '../../redux/profile-reducer';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {compose} from 'redux';\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    authorizedUserId: number | null\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchToPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n}\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\nexport type ProfileContainerPropsType = MapStateToPropsType & MapDispatchToPropsType\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfileContainerPropsType\r\n\r\nclass ProfileContainer extends React.Component<PropsType, AppStateType> {\r\n\r\n    refreshProfile() {\r\n\r\n        let userId = +this.props.match.params.userId\r\n        if (!userId) {\r\n            this.props.authorizedUserId !== null ? userId = this.props.authorizedUserId :  this.props.history.push('login')\r\n        }\r\n\r\n\r\n        // let userId = +this.props.match.params.userId\r\n        // if (!userId) {\r\n        //     this.props.authorizedUserId !== null ? userId = this.props.authorizedUserId : this.props.history.push('login')\r\n        //     // userId = this.props.authorizedUserId !== null ? this.props.authorizedUserId : 1049\r\n        //\r\n        //     // userId = this.props.authorizedUserId\r\n        //     // if (!userId) {\r\n        //     //   this.props.history.push('login')\r\n        //     // }\r\n        // }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<AppStateType>, snapshot?: any) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                     savePhoto={this.props.savePhoto}/>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth,\r\n})\r\n\r\nexport default compose<ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto}),\r\n    withRouter,\r\n    // withAuthRedirect\r\n)(ProfileContainer)","import React, {FC, HTMLInputTypeAttribute} from 'react';\r\nimport style from './FormsControls.module.css'\r\nimport {Field, WrappedFieldInputProps, WrappedFieldMetaProps} from 'redux-form';\r\n\r\ntype FormsControlsPropsType = {\r\n    input: WrappedFieldInputProps\r\n    meta: WrappedFieldMetaProps\r\n    placeholder?: string\r\n    type?: HTMLInputTypeAttribute\r\n    autoFocus?: boolean\r\n}\r\n\r\nconst FormControl: FC<FormsControlsPropsType> = ({meta: {touched, error}, children}) => {\r\n    const hasError = touched && error\r\n    return (\r\n        <div className={style.formControl + ' ' + (hasError ? style.error : '')}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea: FC<FormsControlsPropsType> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    return <FormControl {...props} ><textarea {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const Input: FC<FormsControlsPropsType> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    return <FormControl {...props} ><input {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const createField = (placeholder: string | null, name: string, validators: any, component: FC<FormsControlsPropsType>, props: any = {}, text: string = '') => (\r\n    <div>\r\n        <Field placeholder={placeholder}\r\n               name={name}\r\n               validate={validators}\r\n               component={component}\r\n               {...props}\r\n        /> {text}\r\n    </div>\r\n)","export const required = (value: string) => {\r\n  if (value) return undefined\r\n\r\n  return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n  if (value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n  return undefined\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__iw5Wr\",\"error\":\"FormsControls_error__vUZR7\",\"formSummaryError\":\"FormsControls_formSummaryError__P7Ljl\"};","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["ProfileStatusWithHooks","status","updateStatus","useState","editMode","setEditMode","newStatus","setNewStatus","useEffect","onChange","e","currentTarget","value","onBlur","autoFocus","onDoubleClick","ProfileInfo","profile","isOwner","savePhoto","Preloader","className","s","src","photos","large","userPhoto","alt","type","target","files","length","props","message","likesCount","maxLength10","maxLengthCreator","AddNewPostFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","name","component","Textarea","placeholder","validate","required","MyPostsContainer","connect","state","posts","profilePage","dispatch","addPost","newPostText","addPostActionCreator","postsElements","reverse","map","p","id","style","formData","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","React","compose","auth","isAuth","withRouter","FormControl","meta","touched","error","children","hasError","input","restProps","Input","createField","validators","text","maxLength","_slicedToArray","arr","i","Array","isArray","_i","Symbol","iterator","_s","_e","_arr","_n","_d","call","next","done","err","unsupportedIterableToArray","TypeError"],"sourceRoot":""}