{"version":3,"file":"static/js/478.a392052e.chunk.js","mappings":"2MACA,EAA0B,0BAA1B,EAAoE,gCAApE,EAAoH,gCAApH,EAAqK,iCAArK,EAAsN,gC,4BCOzMA,EAAqB,WAChC,OACE,0BACE,SAACC,EAAD,OAKAA,EAAiB,WACrB,IAAMC,GAAWC,EAAAA,EAAAA,MAEXC,GAASC,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,UAS/D,OAPAI,EAAAA,EAAAA,YAAU,WAER,OADAN,GAASO,EAAAA,EAAAA,OACF,WACLP,GAASQ,EAAAA,EAAAA,UAEV,KAGD,2BACc,UAAXN,IAAsB,0EACvB,iCACE,0BACE,SAACO,EAAD,OAEF,mBACA,gBAAKC,UAAWC,EAAhB,UACE,SAACC,EAAD,aAOJH,EAAyB,SAAC,IC5CjB,SAAmCI,GAChD,GAAW,MAAPA,EAAa,MAAM,IAAIC,UAAU,gCD2CC,IACtC,IAAMC,GAAWZ,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKU,YAC3DC,GAAoBC,EAAAA,EAAAA,QAAuB,MACjD,GAAwCC,EAAAA,EAAAA,WAAS,GAAjD,eAAOC,EAAP,KAAqBC,EAArB,KAiBA,OANAd,EAAAA,EAAAA,YAAU,WACW,IAAD,EAAda,IACF,UAAAH,EAAkBK,eAAlB,SAA2BC,eAAe,CAAEC,SAAU,cAEvD,CAACR,KAGF,iBAAKS,MAAO,CAAEC,OAAQ,QAASC,UAAW,QAAUC,SAhBhC,SAACC,GACrB,IAAMC,EAAUD,EAAEE,cACdC,KAAKC,IAAIH,EAAQI,aAAeJ,EAAQK,UAAYL,EAAQM,cAAgB,KAC7EhB,GAAgBC,GAAgB,GAEjCD,GAAgBC,GAAgB,IAWlC,UACGL,EAASqB,KAAI,SAAAC,GAAC,OACb,SAACC,EAAD,CAAoBC,QAASF,GAAfA,EAAEG,QAElB,gBAAKC,IAAKzB,QAKVsB,EAAqDI,EAAAA,MAAW,YAAkB,IAAfH,EAAc,EAAdA,QACvE,OACE,iBAAK7B,UAAWC,EAAhB,WACE,gBAAKD,UAAWC,EAAhB,UACE,gBAAKgC,IAAKJ,EAAQK,MAAOC,IAAK,cAEhC,iBAAKnC,UAAWC,EAAhB,WACE,uBAAI4B,EAAQO,WACXP,EAAQA,YAEX,wBAKA3B,EAA+B,WACnC,OAA8BM,EAAAA,EAAAA,UAAS,IAAvC,eAAOqB,EAAP,KAAgBQ,EAAhB,KACM/C,GAAWC,EAAAA,EAAAA,MAEXC,GAASC,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,UAUvD8C,EAAaC,EAAAA,EAAAA,SAErB,OACE,iBAAKvC,UAAWC,EAAhB,WACE,SAACqC,EAAD,CAAUE,SAAU,SAAAtB,GAAC,OAAImB,EAAWnB,EAAEE,cAAcqB,QAAQA,MAAOZ,KAEnE,SAAC,IAAD,CAAQa,SAAqB,UAAXlD,EAAoBmD,QAdf,WACpBd,IAGLvC,GAASsD,EAAAA,EAAAA,IAAYf,IACrBQ,EAAW,MAST","sources":["webpack://samurai-way/./src/pages/Chat/ChatPage.module.css?29d9","pages/Chat/ChatPage.tsx","../node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"message\":\"ChatPage_message__ekaVF\",\"message__user\":\"ChatPage_message__user__QdWKY\",\"message__text\":\"ChatPage_message__text__3gkg-\",\"addMessageForm\":\"ChatPage_addMessageForm__aMkhb\",\"message__form\":\"ChatPage_message__form__683ZH\"};","import React, { useEffect, useRef, useState } from 'react';\r\nimport { ChatMessageAPIType } from '../../api/chat-api';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { sendMessage, startMessagesListening, stopMessagesListening } from '../../redux/chat-reducer';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport s from './ChatPage.module.css';\r\nimport { Button, Input } from 'antd';\r\n\r\nexport const ChatPage: React.FC = () => {\r\n  return (\r\n    <div>\r\n      <Chat />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Chat: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const status = useSelector((state: AppStateType) => state.chat.status);\r\n\r\n  useEffect(() => {\r\n    dispatch(startMessagesListening());\r\n    return () => {\r\n      dispatch(stopMessagesListening());\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {status === 'error' && <div>Some error occured. Please refresh the page</div>}\r\n      <>\r\n        <div>\r\n          <Messages />\r\n        </div>\r\n        <hr />\r\n        <div className={s.addMessageForm}>\r\n          <AddMessageForm />\r\n        </div>\r\n      </>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Messages: React.FC<{}> = ({}) => {\r\n  const messages = useSelector((state: AppStateType) => state.chat.messages);\r\n  const messagesAnchorRef = useRef<HTMLDivElement>(null);\r\n  const [isAutoScroll, setIsAutoScroll] = useState(true);\r\n\r\n  const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n    const element = e.currentTarget;\r\n    if (Math.abs(element.scrollHeight - element.scrollTop - element.clientHeight) < 300) {\r\n      !isAutoScroll && setIsAutoScroll(true);\r\n    } else {\r\n      isAutoScroll && setIsAutoScroll(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isAutoScroll) {\r\n      messagesAnchorRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n    }\r\n  }, [messages]);\r\n\r\n  return (\r\n    <div style={{ height: '600px', overflowY: 'auto' }} onScroll={scrollHandler}>\r\n      {messages.map(m => (\r\n        <Message key={m.id} message={m} />\r\n      ))}\r\n      <div ref={messagesAnchorRef}></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Message: React.FC<{ message: ChatMessageAPIType }> = React.memo(({ message }) => {\r\n  return (\r\n    <div className={s.message}>\r\n      <div className={s.message__user}>\r\n        <img src={message.photo} alt={'avatar'} />\r\n      </div>\r\n      <div className={s.message__text}>\r\n        <b>{message.userName}</b>\r\n        {message.message}\r\n      </div>\r\n      <hr />\r\n    </div>\r\n  );\r\n});\r\n\r\nconst AddMessageForm: React.FC<{}> = () => {\r\n  const [message, setMessage] = useState('');\r\n  const dispatch = useDispatch();\r\n\r\n  const status = useSelector((state: AppStateType) => state.chat.status);\r\n\r\n  const sendMessageHandler = () => {\r\n    if (!message) {\r\n      return;\r\n    }\r\n    dispatch(sendMessage(message));\r\n    setMessage('');\r\n  };\r\n\r\n  const { TextArea } = Input;\r\n\r\n  return (\r\n    <div className={s.message__form}>\r\n      <TextArea onChange={e => setMessage(e.currentTarget.value)} value={message}></TextArea>\r\n\r\n      <Button disabled={status !== 'ready'} onClick={sendMessageHandler}>\r\n        Send\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n","export default function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n}"],"names":["ChatPage","Chat","dispatch","useDispatch","status","useSelector","state","chat","useEffect","startMessagesListening","stopMessagesListening","Messages","className","s","AddMessageForm","obj","TypeError","messages","messagesAnchorRef","useRef","useState","isAutoScroll","setIsAutoScroll","current","scrollIntoView","behavior","style","height","overflowY","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","Message","message","id","ref","React","src","photo","alt","userName","setMessage","TextArea","Input","onChange","value","disabled","onClick","sendMessage"],"sourceRoot":""}