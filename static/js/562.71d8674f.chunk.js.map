{"version":3,"file":"static/js/562.71d8674f.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/Profile.module.css?b512","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","webpack://samurai-way/./src/components/Profile/ProfileInfo/Contact/Contact.module.css?1e8e","components/Profile/ProfileInfo/Contact/Contact.tsx","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileDataForm/ProfileDataForm.module.css?9ff0","components/Profile/ProfileInfo/ProfileDataForm/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/AddPostForm/AddPostForm.module.css?7b47","components/Profile/MyPosts/AddPostForm/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/common/FormsControls/FormsControls.tsx","webpack://samurai-way/./src/components/common/FormsControls/FormsControls.module.css?eb50"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"profile\":\"Profile_profile__8AvcK\",\"avatarBlock\":\"Profile_avatarBlock__nf3x1\",\"mainPhoto\":\"Profile_mainPhoto__nnoEH\",\"previewImage\":\"Profile_previewImage__hgrDb\",\"fileInput\":\"Profile_fileInput__LHeTS\",\"customFileUpload\":\"Profile_customFileUpload__Ztp0O\",\"profileContent\":\"Profile_profileContent__Hi8K9\"};","// extracted by mini-css-extract-plugin\nexport default {\"profileInfo\":\"ProfileInfo_profileInfo__EpvzR\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__UU8E7\",\"profileStatus\":\"ProfileInfo_profileStatus__cR6yh\",\"profileData\":\"ProfileInfo_profileData__D97W+\",\"profileDataContent\":\"ProfileInfo_profileDataContent__7xvIs\",\"editButton\":\"ProfileInfo_editButton__OTYdw\"};","import React, { ChangeEvent, FC, useEffect, useState } from 'react';\r\n\r\nexport const ProfileStatusWithHooks: FC<ProfileStatusWithHooksPropsType> = ({ status, updateStatus }) => {\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [newStatus, setNewStatus] = useState(status);\r\n\r\n  useEffect(() => {\r\n    setNewStatus(status);\r\n  }, [status]);\r\n\r\n  const activateEditMode = () => {\r\n    setEditMode(true);\r\n  };\r\n  const deActivateEditMode = () => {\r\n    setEditMode(false);\r\n    updateStatus(newStatus);\r\n  };\r\n  const onStatusChange = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n    setNewStatus(e.currentTarget.value);\r\n  };\r\n  return (\r\n    <div>\r\n      {!editMode ? (\r\n        <div>\r\n          <b>Status: </b> <span onDoubleClick={activateEditMode}>{status || '------'}</span>\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <input onChange={onStatusChange} value={newStatus} onBlur={deActivateEditMode} autoFocus />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\n// Types\r\ntype ProfileStatusWithHooksPropsType = {\r\n  status: string;\r\n  updateStatus: (status: string) => void;\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"contact\":\"Contact_contact__vqn2I\"};","import React, { FC } from 'react';\r\nimport s from './Contact.module.css';\r\n\r\ntype ContactPropsType = {\r\n  contactTitle: string | null;\r\n  contactValue: string | null;\r\n};\r\nexport const Contact: FC<ContactPropsType> = ({ contactTitle, contactValue }) => {\r\n  return (\r\n    <div className={s.contact}>\r\n      <span>\r\n        <b>{contactTitle}</b>:{' '}\r\n      </span>\r\n      {contactValue}\r\n    </div>\r\n  );\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"profileDataForm\":\"ProfileDataForm_profileDataForm__mMS5H\",\"profileDataFormContent\":\"ProfileDataForm_profileDataFormContent__stNtA\",\"contacts\":\"ProfileDataForm_contacts__5TLJr\",\"contactsTitle\":\"ProfileDataForm_contactsTitle__PYbHA\",\"contact\":\"ProfileDataForm_contact__30egV\"};","import React, { FC } from 'react';\r\nimport { createField, MyInput, MyTextarea } from '../../../common/FormsControls/FormsControls';\r\nimport { InjectedFormProps, reduxForm } from 'redux-form';\r\nimport styleFormControls from '../../../common/FormsControls/FormsControls.module.css';\r\nimport { GetStringKeys, ProfileType } from '../../../../types/types';\r\nimport s from './ProfileDataForm.module.css';\r\nimport { SaveOutlined } from '@ant-design/icons';\r\nimport { Button } from 'antd';\r\n\r\ntype ProfileDataFormPropsType = {\r\n  profile: ProfileType;\r\n};\r\n\r\ntype ProfileTypeKeys = GetStringKeys<ProfileType>;\r\n\r\nconst ProfileDataForm: FC<InjectedFormProps<ProfileType, ProfileDataFormPropsType> & ProfileDataFormPropsType> = ({\r\n  handleSubmit,\r\n  error,\r\n  profile,\r\n}) => {\r\n  return (\r\n    <form onSubmit={handleSubmit} className={s.profileDataForm}>\r\n      <div className={s.profileDataFormContent}>\r\n        {error && <div className={styleFormControls.formSummaryError}>{error}</div>}\r\n\r\n        <div>\r\n          <span>\r\n            <b>Full name</b>:{' '}\r\n          </span>\r\n          {createField<ProfileTypeKeys>('Full name', 'fullName', [], MyInput)}\r\n        </div>\r\n        <div>\r\n          <span>\r\n            <b>Looking for a job</b>:{' '}\r\n          </span>\r\n          {createField<ProfileTypeKeys>('', 'lookingForAJob', [], MyInput, { type: 'checkbox' })}\r\n        </div>\r\n\r\n        <div>\r\n          <span>\r\n            <b>My professional skills</b>:{' '}\r\n          </span>\r\n          {createField<ProfileTypeKeys>('My professional skills', 'lookingForAJobDescription', [], MyTextarea)}\r\n        </div>\r\n\r\n        <div>\r\n          <span>\r\n            <b>About me</b>:{' '}\r\n          </span>\r\n          {createField<ProfileTypeKeys>('About me', 'aboutMe', [], MyTextarea)}\r\n        </div>\r\n\r\n        <div className={s.contacts}>\r\n          <span className={s.contactsTitle}>\r\n            <b>Contacts</b>:{' '}\r\n          </span>\r\n          {Object.keys(profile.contacts).map(key => {\r\n            return (\r\n              <div key={key} className={s.contact}>\r\n                <b>\r\n                  <span>{key}: </span>\r\n                  {createField(key, 'contacts.' + key, [], MyInput)}\r\n                </b>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n      <div>\r\n        <Button htmlType=\"submit\" className={s.saveButton}>\r\n          <SaveOutlined />\r\n        </Button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, ProfileDataFormPropsType>({ form: 'edit-profile' })(\r\n  ProfileDataForm,\r\n);\r\nexport default ProfileDataFormReduxForm;\r\n","import React, { FC } from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport { Preloader } from '../../common/Preloader/Preloader';\r\nimport { ProfileStatusWithHooks } from './ProfileStatusWithHooks';\r\nimport { Contact } from './Contact/Contact';\r\nimport ProfileDataForm from './ProfileDataForm/ProfileDataForm';\r\nimport { ContactsType, ProfileType } from '../../../types/types';\r\nimport { Button } from 'antd';\r\nimport { EditOutlined } from '@ant-design/icons';\r\n\r\ntype ProfileInfoPropsType = {\r\n  profile: ProfileType | null;\r\n  status: string;\r\n  updateStatus: (status: string) => void;\r\n  isOwner: boolean;\r\n  // savePhoto: (photoFile: File) => void;\r\n  saveProfile: (profile: ProfileType) => Promise<any>;\r\n};\r\n\r\nexport const ProfileInfo: FC<ProfileInfoPropsType> = ({ profile, status, updateStatus, isOwner, saveProfile }) => {\r\n  let [editMode, setEditMode] = React.useState(false);\r\n\r\n  if (!profile) {\r\n    return <Preloader />;\r\n  }\r\n\r\n  const onSubmit = (formData: ProfileType) => {\r\n    saveProfile(formData).then(() => {\r\n      setEditMode(false);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className={s.descriptionBlock}>\r\n      <div className={s.profileStatus}>\r\n        <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\r\n      </div>\r\n      {editMode ? (\r\n        <ProfileDataForm onSubmit={onSubmit} profile={profile} initialValues={profile} />\r\n      ) : (\r\n        <ProfileData\r\n          profile={profile}\r\n          isOwner={isOwner}\r\n          goToEditMode={() => {\r\n            setEditMode(true);\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\ntype ProfileDataPropsType = {\r\n  profile: ProfileType;\r\n  isOwner: boolean;\r\n  goToEditMode: () => void;\r\n};\r\n\r\nconst ProfileData: FC<ProfileDataPropsType> = ({ profile, isOwner, goToEditMode }) => {\r\n  return (\r\n    <div className={s.profileData}>\r\n      <div className={s.profileDataContent}>\r\n        <div>\r\n          <span>\r\n            <b>Full name</b>:{' '}\r\n          </span>\r\n          {profile.fullName}\r\n        </div>\r\n        <div>\r\n          <span>\r\n            <b>Looking for a job</b>:{' '}\r\n          </span>\r\n          {profile.lookingForAJob ? 'yes' : 'no'}\r\n        </div>\r\n        {profile.lookingForAJob && (\r\n          <div>\r\n            <span>\r\n              <b>My professional skills</b>:{' '}\r\n            </span>\r\n            {profile.lookingForAJobDescription}\r\n          </div>\r\n        )}\r\n        <div>\r\n          <span>\r\n            <b>About me</b>:{' '}\r\n          </span>\r\n          {profile.aboutMe}\r\n        </div>\r\n        <br />\r\n        <div>\r\n          <b>Contacts</b>:{' '}\r\n          {Object.keys(profile.contacts).map(key => {\r\n            return (\r\n              profile.contacts[key as keyof ContactsType] && (\r\n                <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]} />\r\n              )\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n      {isOwner && (\r\n        <div className={s.editButton}>\r\n          <Button onClick={goToEditMode}>\r\n            <EditOutlined />\r\n          </Button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__UQGsK\",\"posts\":\"MyPosts_posts__eHHT8\"};","// extracted by mini-css-extract-plugin\nexport default {\"post\":\"Post_post__8IgOn\",\"post_text\":\"Post_post_text__qd8oC\",\"post_like\":\"Post_post_like__lrS0d\"};","import React from 'react';\r\nimport s from './Post.module.css';\r\nimport { UserOutlined } from '@ant-design/icons';\r\nimport { Avatar } from 'antd';\r\n\r\ntype PostPropsType = {\r\n  message: string;\r\n  likesCount: number;\r\n};\r\n\r\nexport const Post: React.FC<PostPropsType> = props => {\r\n  return (\r\n    <div className={s.post}>\r\n      {/*<img*/}\r\n      {/*  src=\"https://365psd.com/images/istock/previews/9730/97305669-avatar-icon-of-girl-in-a-baseball-cap.jpg\"*/}\r\n      {/*  alt=\"avatar_icon\"*/}\r\n      {/*/>*/}\r\n      <Avatar icon={<UserOutlined />} />\r\n      <div className={s.post_text}>\r\n        {props.message}\r\n        <div className={s.post_like}>\r\n          <span>like: </span>\r\n          {props.likesCount}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"addPostForm\":\"AddPostForm_addPostForm__hAG5q\",\"addPostForm__inputContainer\":\"AddPostForm_addPostForm__inputContainer__2I-ne\"};","import React from 'react';\r\nimport { InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { createField, MyTextarea } from '../../../common/FormsControls/FormsControls';\r\nimport { GetStringKeys } from '../../../../types/types';\r\nimport s from './AddPostForm.module.css';\r\n\r\ntype PropsType = {};\r\n\r\nexport type AddPostFormValuesType = {\r\n  newPostText: string;\r\n};\r\n\r\ntype AddPostFormValuesTypeKeys = GetStringKeys<AddPostFormValuesType>;\r\n\r\nconst AddPostForm: React.FC<InjectedFormProps<AddPostFormValuesType, PropsType> & PropsType> = props => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit} className={s.addPostForm}>\r\n      <div className={s.addPostForm__inputContainer}>\r\n        {createField<AddPostFormValuesTypeKeys>('Your post', 'newPostText', [] /*[required]*/, MyTextarea)}\r\n      </div>\r\n      <div>\r\n        <button>Add post</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default reduxForm<AddPostFormValuesType, PropsType>({ form: 'profile-add-post' })(AddPostForm);\r\n","import React, { FC } from 'react';\r\nimport style from './MyPosts.module.css';\r\nimport { Post } from './Post/Post';\r\nimport { MyPostsPropsType } from './MyPostsContainer';\r\nimport AddPostForm, { AddPostFormValuesType } from './AddPostForm/AddPostForm';\r\n\r\nexport const MyPosts: FC<MyPostsPropsType> = React.memo(props => {\r\n  let postsElements = [...props.posts]\r\n    .reverse()\r\n    .map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount} />);\r\n\r\n  const onAddPost = (formData: AddPostFormValuesType) => {\r\n    props.addPost(formData.newPostText);\r\n  };\r\n\r\n  return (\r\n    <div className={style.postsBlock}>\r\n      <h3>My posts</h3>\r\n      <AddPostForm onSubmit={onAddPost} />\r\n      <div className={style.posts}>{postsElements}</div>\r\n    </div>\r\n  );\r\n});\r\n","import { MyPosts } from './MyPosts';\r\nimport { connect } from 'react-redux';\r\nimport { AppStateType } from '../../../redux/redux-store';\r\nimport { PostType } from '../../../types/types';\r\nimport { profileReducerActions } from '../../../redux/profile-reducer';\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n  return {\r\n    posts: state.profilePage.posts,\r\n  };\r\n};\r\n\r\nexport const MyPostsContainer = connect<MapStateToPropsType, MapDispatchToPropsType, {}, AppStateType>(\r\n  mapStateToProps,\r\n  { addPost: profileReducerActions.addPostActionCreator },\r\n)(MyPosts);\r\n\r\n// Types\r\ntype MapStateToPropsType = { posts: PostType[] };\r\ntype MapDispatchToPropsType = { addPost: (newPostText: string) => void };\r\nexport type MyPostsPropsType = MapStateToPropsType & MapDispatchToPropsType;\r\n","import React, { ChangeEvent, FC } from 'react';\r\nimport s from './Profile.module.css';\r\nimport { ProfileInfo } from './ProfileInfo/ProfileInfo';\r\nimport { MyPostsContainer } from './MyPosts/MyPostsContainer';\r\nimport { ProfileType } from '../../types/types';\r\nimport userPhoto from '../../assets/images/user.png';\r\nimport { Image, Input } from 'antd';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport { useSelector } from 'react-redux';\r\nimport { DownloadOutlined } from '@ant-design/icons';\r\nimport { savePhoto } from '../../redux/profile-reducer';\r\n\r\nexport const Profile: FC<ProfilePropsType> = props => {\r\n  const profile = useSelector((state: AppStateType) => state.profilePage.profile);\r\n\r\n  const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n    if (e.target.files && e.target.files.length) {\r\n      savePhoto(e.target.files[0]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={s.profile}>\r\n      <div className={s.avatarBlock}>\r\n        <Image\r\n          className={s.mainPhoto}\r\n          preview={{ className: s.previewImage }}\r\n          src={profile?.photos.large || userPhoto}\r\n          alt={'Avatar'}\r\n        />\r\n        {/*<img src={profile.photos.large || userPhoto} alt={\"Avatar\"} className={s.mainPhoto} />*/}\r\n        {props.isOwner && (\r\n          <>\r\n            <label htmlFor=\"file-upload\" className={s.customFileUpload}>\r\n              <DownloadOutlined />\r\n            </label>\r\n            <Input id=\"file-upload\" type=\"file\" className={s.fileInput} onChange={onMainPhotoSelected} />\r\n          </>\r\n        )}\r\n      </div>\r\n      <div className={s.profileContent}>\r\n        <ProfileInfo\r\n          // savePhoto={props.savePhoto}\r\n          isOwner={props.isOwner}\r\n          profile={props.profile}\r\n          status={props.status}\r\n          saveProfile={props.saveProfile}\r\n          updateStatus={props.updateStatus}\r\n        />\r\n        <MyPostsContainer />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Types\r\ntype ProfilePropsType = {\r\n  profile: ProfileType | null;\r\n  status: string;\r\n  updateStatus: (status: string) => void;\r\n  isOwner: boolean;\r\n  savePhoto: (file: File) => void;\r\n  saveProfile: (profile: ProfileType) => Promise<any>;\r\n};\r\n","import React, { ComponentType } from 'react';\r\nimport { Profile } from './Profile';\r\nimport { connect } from 'react-redux';\r\nimport { getStatus, getUserProfile, savePhoto, saveProfile, updateStatus } from '../../redux/profile-reducer';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\r\nimport { compose } from 'redux';\r\nimport { ProfileType } from '../../types/types';\r\n\r\nclass ProfileContainer extends React.Component<PropsType, AppStateType> {\r\n  refreshProfile() {\r\n    let userId: number | null = +this.props.match.params.userId;\r\n    if (!userId) {\r\n      // this.props.authorizedUserId !== null ? (userId = this.props.authorizedUserId) : this.props.history.push(\"login\");\r\n      userId = this.props.authorizedUserId;\r\n      if (!userId) {\r\n        this.props.history.push('login');\r\n      }\r\n    }\r\n    if (!userId) {\r\n      console.error(\"ID should exists in URI params or in state ('authorizedUserId')\");\r\n    } else {\r\n      this.props.getUserProfile(userId);\r\n      this.props.getStatus(userId);\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.refreshProfile();\r\n  }\r\n\r\n  componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<AppStateType>) {\r\n    if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n      this.refreshProfile();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Profile\r\n        {...this.props}\r\n        isOwner={!this.props.match.params.userId}\r\n        profile={this.props.profile}\r\n        status={this.props.status}\r\n        updateStatus={this.props.updateStatus}\r\n        savePhoto={this.props.savePhoto}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n  profile: state.profilePage.profile,\r\n  status: state.profilePage.status,\r\n  authorizedUserId: state.auth.userId,\r\n  isAuth: state.auth.isAuth,\r\n});\r\n\r\nexport default compose<ComponentType>(\r\n  connect(mapStateToProps, { getUserProfile, getStatus, updateStatus, savePhoto, saveProfile }),\r\n  withRouter,\r\n)(ProfileContainer);\r\n\r\n// Types\r\ntype MapStateToPropsType = {\r\n  profile: ProfileType | null;\r\n  status: string;\r\n  authorizedUserId: number | null;\r\n  isAuth: boolean;\r\n};\r\ntype MapDispatchToPropsType = {\r\n  getUserProfile: (userId: number) => void;\r\n  getStatus: (userId: number) => void;\r\n  updateStatus: (status: string) => void;\r\n  savePhoto: (file: File) => void;\r\n  saveProfile: (profile: ProfileType) => Promise<any>;\r\n};\r\ntype PathParamsType = {\r\n  userId: string;\r\n};\r\n\r\ntype PropsType = RouteComponentProps<PathParamsType> & MapStateToPropsType & MapDispatchToPropsType;\r\n","import React, { FC } from 'react';\r\nimport style from './FormsControls.module.css';\r\nimport { Field, WrappedFieldMetaProps, WrappedFieldProps } from 'redux-form';\r\nimport { FieldValidatorType } from '../../../utils/validators/validators';\r\nimport TextArea from 'antd/es/input/TextArea';\r\nimport { Input } from 'antd';\r\n\r\ntype FormsControlsPropsType = {\r\n  meta: WrappedFieldMetaProps;\r\n  //   input: WrappedFieldInputProps;\r\n  //   // placeholder?: string;\r\n  //   // type?: HTMLInputTypeAttribute;\r\n  //   // autoFocus?: boolean;\r\n};\r\n\r\nconst FormControl: FC<FormsControlsPropsType> = ({ meta: { touched, error }, children }) => {\r\n  const hasError = touched && error;\r\n  return (\r\n    <div className={style.formControl + ' ' + (hasError ? style.error : '')}>\r\n      <div>{children}</div>\r\n      {hasError && <span>{error}</span>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const MyTextarea: FC<WrappedFieldProps> = props => {\r\n  const { input, meta, ...restProps } = props;\r\n  return (\r\n    <FormControl {...props}>\r\n      <TextArea {...input} {...restProps} />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport const MyInput: FC<WrappedFieldProps> = props => {\r\n  const { input, meta, ...restProps } = props;\r\n  return (\r\n    <FormControl {...props}>\r\n      <Input {...input} {...restProps} />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport function createField<FormKeysType extends string>(\r\n  placeholder: string | undefined,\r\n  name: FormKeysType,\r\n  validators: FieldValidatorType[],\r\n  component: FC<WrappedFieldProps>,\r\n  props: any = {},\r\n  text: string = '',\r\n) {\r\n  return (\r\n    <>\r\n      <Field placeholder={placeholder} name={name} validate={validators} component={component} {...props} /> {text}\r\n    </>\r\n  );\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__iw5Wr\",\"error\":\"FormsControls_error__vUZR7\",\"formSummaryError\":\"FormsControls_formSummaryError__P7Ljl\"};"],"names":["ProfileStatusWithHooks","status","updateStatus","useState","editMode","setEditMode","newStatus","setNewStatus","useEffect","onChange","e","currentTarget","value","onBlur","autoFocus","onDoubleClick","Contact","contactTitle","contactValue","className","s","reduxForm","form","handleSubmit","error","profile","onSubmit","styleFormControls","createField","MyInput","type","MyTextarea","Object","keys","contacts","map","key","htmlType","SaveOutlined","ProfileInfo","isOwner","saveProfile","React","Preloader","formData","then","initialValues","ProfileData","goToEditMode","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","onClick","EditOutlined","Post","props","icon","UserOutlined","message","likesCount","MyPosts","postsElements","posts","reverse","p","id","style","addPost","newPostText","MyPostsContainer","connect","state","profilePage","profileReducerActions","Profile","useSelector","preview","src","photos","large","userPhoto","alt","htmlFor","DownloadOutlined","target","files","length","savePhoto","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","console","refreshProfile","prevProps","prevState","compose","auth","isAuth","withRouter","FormControl","meta","touched","children","hasError","input","restProps","placeholder","name","validators","component","text","validate"],"sourceRoot":""}