{"version":3,"file":"static/js/562.b781f396.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/Profile.module.css?b512","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","webpack://samurai-way/./src/components/Profile/ProfileInfo/Contact/Contact.module.css?1e8e","components/Profile/ProfileInfo/Contact/Contact.tsx","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileDataForm/ProfileDataForm.module.css?9ff0","components/Profile/ProfileInfo/ProfileDataForm/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/AddPostForm/AddPostForm.module.css?7b47","components/Profile/MyPosts/AddPostForm/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/common/FormsControls/FormsControls.tsx","webpack://samurai-way/./src/components/common/FormsControls/FormsControls.module.css?eb50"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"profile\":\"Profile_profile__8AvcK\",\"avatarBlock\":\"Profile_avatarBlock__nf3x1\",\"mainPhoto\":\"Profile_mainPhoto__nnoEH\",\"previewImage\":\"Profile_previewImage__hgrDb\",\"fileInput\":\"Profile_fileInput__LHeTS\",\"customFileUpload\":\"Profile_customFileUpload__Ztp0O\",\"profileContent\":\"Profile_profileContent__Hi8K9\"};","// extracted by mini-css-extract-plugin\nexport default {\"profileInfo\":\"ProfileInfo_profileInfo__EpvzR\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__UU8E7\",\"profileStatus\":\"ProfileInfo_profileStatus__cR6yh\",\"profileData\":\"ProfileInfo_profileData__D97W+\",\"profileDataContent\":\"ProfileInfo_profileDataContent__7xvIs\",\"editButton\":\"ProfileInfo_editButton__OTYdw\"};","import React, { ChangeEvent, FC, useEffect, useState } from \"react\";\r\n\r\nexport const ProfileStatusWithHooks: FC<ProfileStatusWithHooksPropsType> = ({ status, updateStatus }) => {\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [newStatus, setNewStatus] = useState(status);\r\n\r\n  useEffect(() => {\r\n    setNewStatus(status);\r\n  }, [status]);\r\n\r\n  const activateEditMode = () => {\r\n    setEditMode(true);\r\n  };\r\n  const deActivateEditMode = () => {\r\n    setEditMode(false);\r\n    updateStatus(newStatus);\r\n  };\r\n  const onStatusChange = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n    setNewStatus(e.currentTarget.value);\r\n  };\r\n  return (\r\n    <div>\r\n      {!editMode ? (\r\n        <div>\r\n          <b>Status: </b> <span onDoubleClick={activateEditMode}>{status || \"------\"}</span>\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <input onChange={onStatusChange} value={newStatus} onBlur={deActivateEditMode} autoFocus />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\n// Types\r\ntype ProfileStatusWithHooksPropsType = {\r\n  status: string;\r\n  updateStatus: (status: string) => void;\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"contact\":\"Contact_contact__vqn2I\"};","import React, { FC } from \"react\";\nimport s from \"./Contact.module.css\";\n\ntype ContactPropsType = {\n  contactTitle: string | null;\n  contactValue: string | null;\n};\nexport const Contact: FC<ContactPropsType> = ({ contactTitle, contactValue }) => {\n  return (\n    <div className={s.contact}>\n      <span>\n        <b>{contactTitle}</b>:{\" \"}\n      </span>\n      {contactValue}\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"profileDataForm\":\"ProfileDataForm_profileDataForm__mMS5H\",\"profileDataFormContent\":\"ProfileDataForm_profileDataFormContent__stNtA\",\"contacts\":\"ProfileDataForm_contacts__5TLJr\",\"contactsTitle\":\"ProfileDataForm_contactsTitle__PYbHA\",\"contact\":\"ProfileDataForm_contact__30egV\"};","import React, { FC } from \"react\";\nimport { createField, MyInput, MyTextarea } from \"../../../common/FormsControls/FormsControls\";\nimport { InjectedFormProps, reduxForm } from \"redux-form\";\nimport styleFormControls from \"../../../common/FormsControls/FormsControls.module.css\";\nimport { GetStringKeys, ProfileType } from \"../../../../types/types\";\nimport s from \"./ProfileDataForm.module.css\";\nimport { SaveOutlined } from \"@ant-design/icons\";\nimport { Button } from \"antd\";\n\ntype ProfileDataFormPropsType = {\n  profile: ProfileType;\n};\n\ntype ProfileTypeKeys = GetStringKeys<ProfileType>;\n\nconst ProfileDataForm: FC<InjectedFormProps<ProfileType, ProfileDataFormPropsType> & ProfileDataFormPropsType> = ({\n  handleSubmit,\n  error,\n  profile,\n}) => {\n  return (\n    <form onSubmit={handleSubmit} className={s.profileDataForm}>\n      <div className={s.profileDataFormContent}>\n        {error && <div className={styleFormControls.formSummaryError}>{error}</div>}\n\n        <div>\n          <span>\n            <b>Full name</b>:{\" \"}\n          </span>\n          {createField<ProfileTypeKeys>(\"Full name\", \"fullName\", [], MyInput)}\n        </div>\n        <div>\n          <span>\n            <b>Looking for a job</b>:{\" \"}\n          </span>\n          {createField<ProfileTypeKeys>(\"\", \"lookingForAJob\", [], MyInput, { type: \"checkbox\" })}\n        </div>\n\n        <div>\n          <span>\n            <b>My professional skills</b>:{\" \"}\n          </span>\n          {createField<ProfileTypeKeys>(\"My professional skills\", \"lookingForAJobDescription\", [], MyTextarea)}\n        </div>\n\n        <div>\n          <span>\n            <b>About me</b>:{\" \"}\n          </span>\n          {createField<ProfileTypeKeys>(\"About me\", \"aboutMe\", [], MyTextarea)}\n        </div>\n\n        <div className={s.contacts}>\n          <span className={s.contactsTitle}>\n            <b>Contacts</b>:{\" \"}\n          </span>\n          {Object.keys(profile.contacts).map((key) => {\n            return (\n              <div key={key} className={s.contact}>\n                <b>\n                  <span>{key}: </span>\n                  {createField(key, \"contacts.\" + key, [], MyInput)}\n                </b>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n      <div>\n        <Button htmlType=\"submit\" className={s.saveButton}>\n          <SaveOutlined />\n        </Button>\n      </div>\n    </form>\n  );\n};\n\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, ProfileDataFormPropsType>({ form: \"edit-profile\" })(\n  ProfileDataForm\n);\nexport default ProfileDataFormReduxForm;\n","import React, { ChangeEvent, FC } from \"react\";\nimport s from \"./ProfileInfo.module.css\";\nimport { Preloader } from \"../../common/Preloader/Preloader\";\nimport { ProfileStatusWithHooks } from \"./ProfileStatusWithHooks\";\nimport { Contact } from \"./Contact/Contact\";\nimport ProfileDataForm from \"./ProfileDataForm/ProfileDataForm\";\nimport { ContactsType, ProfileType } from \"../../../types/types\";\nimport { Button } from \"antd\";\nimport { EditOutlined } from \"@ant-design/icons\";\n\ntype ProfileInfoPropsType = {\n  profile: ProfileType | null;\n  status: string;\n  updateStatus: (status: string) => void;\n  isOwner: boolean;\n  savePhoto: (photoFile: File) => void;\n  saveProfile: (profile: ProfileType) => Promise<any>;\n};\n\nexport const ProfileInfo: FC<ProfileInfoPropsType> = ({\n  profile,\n  status,\n  updateStatus,\n  isOwner,\n  savePhoto,\n  saveProfile,\n}) => {\n  let [editMode, setEditMode] = React.useState(false);\n\n  if (!profile) {\n    return <Preloader />;\n  }\n\n  // const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\n  //   if (e.target.files && e.target.files.length) {\n  //     savePhoto(e.target.files[0]);\n  //   }\n  // };\n\n  const onSubmit = (formData: ProfileType) => {\n    saveProfile(formData).then(() => {\n      setEditMode(false);\n    });\n  };\n\n  return (\n    <div className={s.descriptionBlock}>\n      <div className={s.profileStatus}>\n        <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\n      </div>\n      {editMode ? (\n        <ProfileDataForm onSubmit={onSubmit} profile={profile} initialValues={profile} />\n      ) : (\n        <ProfileData\n          profile={profile}\n          isOwner={isOwner}\n          goToEditMode={() => {\n            setEditMode(true);\n          }}\n        />\n      )}\n    </div>\n  );\n};\n\ntype ProfileDataPropsType = {\n  profile: ProfileType;\n  isOwner: boolean;\n  goToEditMode: () => void;\n};\n\nconst ProfileData: FC<ProfileDataPropsType> = ({ profile, isOwner, goToEditMode }) => {\n  return (\n    <div className={s.profileData}>\n      <div className={s.profileDataContent}>\n        <div>\n          <span>\n            <b>Full name</b>:{\" \"}\n          </span>\n          {profile.fullName}\n        </div>\n        <div>\n          <span>\n            <b>Looking for a job</b>:{\" \"}\n          </span>\n          {profile.lookingForAJob ? \"yes\" : \"no\"}\n        </div>\n        {profile.lookingForAJob && (\n          <div>\n            <span>\n              <b>My professional skills</b>:{\" \"}\n            </span>\n            {profile.lookingForAJobDescription}\n          </div>\n        )}\n        <div>\n          <span>\n            <b>About me</b>:{\" \"}\n          </span>\n          {profile.aboutMe}\n        </div>\n        <br />\n        <div>\n          <b>Contacts</b>:{\" \"}\n          {Object.keys(profile.contacts).map((key) => {\n            return (\n              profile.contacts[key as keyof ContactsType] && (\n                <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]} />\n              )\n            );\n          })}\n        </div>\n      </div>\n      {isOwner && (\n        <div className={s.editButton}>\n          <Button onClick={goToEditMode}>\n            <EditOutlined />\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__UQGsK\",\"posts\":\"MyPosts_posts__eHHT8\"};","// extracted by mini-css-extract-plugin\nexport default {\"post\":\"Post_post__8IgOn\",\"post_text\":\"Post_post_text__qd8oC\",\"post_like\":\"Post_post_like__lrS0d\"};","import React from \"react\";\nimport s from \"./Post.module.css\";\nimport { UserOutlined } from \"@ant-design/icons\";\nimport { Avatar } from \"antd\";\n\ntype PostPropsType = {\n  message: string;\n  likesCount: number;\n};\n\nexport const Post: React.FC<PostPropsType> = (props) => {\n  return (\n    <div className={s.post}>\n      {/*<img*/}\n      {/*  src=\"https://365psd.com/images/istock/previews/9730/97305669-avatar-icon-of-girl-in-a-baseball-cap.jpg\"*/}\n      {/*  alt=\"avatar_icon\"*/}\n      {/*/>*/}\n      <Avatar icon={<UserOutlined />} />\n      <div className={s.post_text}>\n        {props.message}\n        <div className={s.post_like}>\n          <span>like: </span>\n          {props.likesCount}\n        </div>\n      </div>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"addPostForm\":\"AddPostForm_addPostForm__hAG5q\",\"addPostForm__inputContainer\":\"AddPostForm_addPostForm__inputContainer__2I-ne\"};","import React from \"react\";\nimport { InjectedFormProps, reduxForm } from \"redux-form\";\nimport { createField, MyTextarea } from \"../../../common/FormsControls/FormsControls\";\nimport { GetStringKeys } from \"../../../../types/types\";\nimport s from \"./AddPostForm.module.css\";\n\ntype PropsType = {};\n\nexport type AddPostFormValuesType = {\n  newPostText: string;\n};\n\ntype AddPostFormValuesTypeKeys = GetStringKeys<AddPostFormValuesType>;\n\nconst AddPostForm: React.FC<InjectedFormProps<AddPostFormValuesType, PropsType> & PropsType> = (props) => {\n  return (\n    <form onSubmit={props.handleSubmit} className={s.addPostForm}>\n      <div className={s.addPostForm__inputContainer}>\n        {createField<AddPostFormValuesTypeKeys>(\"Your post\", \"newPostText\", [] /*[required]*/, MyTextarea)}\n      </div>\n      <div>\n        <button>Add post</button>\n      </div>\n    </form>\n  );\n};\n\nexport default reduxForm<AddPostFormValuesType, PropsType>({ form: \"profile-add-post\" })(AddPostForm);\n","import React, { FC } from \"react\";\r\nimport style from \"./MyPosts.module.css\";\r\nimport { Post } from \"./Post/Post\";\r\nimport { MyPostsPropsType } from \"./MyPostsContainer\";\r\nimport AddPostForm, { AddPostFormValuesType } from \"./AddPostForm/AddPostForm\";\r\n\r\nexport const MyPosts: FC<MyPostsPropsType> = React.memo((props) => {\r\n  let postsElements = [...props.posts]\r\n    .reverse()\r\n    .map((p) => <Post key={p.id} message={p.message} likesCount={p.likesCount} />);\r\n\r\n  const onAddPost = (formData: AddPostFormValuesType) => {\r\n    props.addPost(formData.newPostText);\r\n  };\r\n\r\n  return (\r\n    <div className={style.postsBlock}>\r\n      <h3>My posts</h3>\r\n      <AddPostForm onSubmit={onAddPost} />\r\n      <div className={style.posts}>{postsElements}</div>\r\n    </div>\r\n  );\r\n});\r\n","import { MyPosts } from \"./MyPosts\";\r\nimport { connect } from \"react-redux\";\r\nimport { AppStateType } from \"../../../redux/redux-store\";\r\nimport { PostType } from \"../../../types/types\";\r\nimport { profileReducerActions } from \"../../../redux/profile-reducer\";\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n  return {\r\n    posts: state.profilePage.posts,\r\n  };\r\n};\r\n\r\nexport const MyPostsContainer = connect<MapStateToPropsType, MapDispatchToPropsType, {}, AppStateType>(\r\n  mapStateToProps,\r\n  { addPost: profileReducerActions.addPostActionCreator }\r\n)(MyPosts);\r\n\r\n// Types\r\ntype MapStateToPropsType = { posts: PostType[] };\r\ntype MapDispatchToPropsType = { addPost: (newPostText: string) => void };\r\nexport type MyPostsPropsType = MapStateToPropsType & MapDispatchToPropsType;\r\n","import React, { ChangeEvent, FC } from \"react\";\nimport s from \"./Profile.module.css\";\nimport { ProfileInfo } from \"./ProfileInfo/ProfileInfo\";\nimport { MyPostsContainer } from \"./MyPosts/MyPostsContainer\";\nimport { ProfileType } from \"../../types/types\";\nimport userPhoto from \"../../assets/images/user.png\";\nimport { Image, Input } from \"antd\";\nimport { AppStateType } from \"../../redux/redux-store\";\nimport { useSelector } from \"react-redux\";\nimport { DownloadOutlined } from \"@ant-design/icons\";\nimport { savePhoto } from \"../../redux/profile-reducer\";\n\nexport const Profile: FC<ProfilePropsType> = (props) => {\n  const profile = useSelector((state: AppStateType) => state.profilePage.profile);\n\n  const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files.length) {\n      savePhoto(e.target.files[0]);\n    }\n  };\n\n  return (\n    <div className={s.profile}>\n      <div className={s.avatarBlock}>\n        <Image\n          className={s.mainPhoto}\n          preview={{ className: s.previewImage }}\n          src={profile?.photos.large || userPhoto}\n          alt={\"Avatar\"}\n        />\n        {/*<img src={profile.photos.large || userPhoto} alt={\"Avatar\"} className={s.mainPhoto} />*/}\n        {props.isOwner && (\n          <>\n            <label htmlFor=\"file-upload\" className={s.customFileUpload}>\n              <DownloadOutlined />\n            </label>\n            <Input id=\"file-upload\" type=\"file\" className={s.fileInput} onChange={onMainPhotoSelected} />\n          </>\n        )}\n      </div>\n      <div className={s.profileContent}>\n        <ProfileInfo\n          savePhoto={props.savePhoto}\n          isOwner={props.isOwner}\n          profile={props.profile}\n          status={props.status}\n          saveProfile={props.saveProfile}\n          updateStatus={props.updateStatus}\n        />\n        <MyPostsContainer />\n      </div>\n    </div>\n  );\n};\n\n// Types\ntype ProfilePropsType = {\n  profile: ProfileType | null;\n  status: string;\n  updateStatus: (status: string) => void;\n  isOwner: boolean;\n  savePhoto: (file: File) => void;\n  saveProfile: (profile: ProfileType) => Promise<any>;\n};\n","import React, { ComponentType } from \"react\";\r\nimport { Profile } from \"./Profile\";\r\nimport { connect } from \"react-redux\";\r\nimport { getStatus, getUserProfile, savePhoto, saveProfile, updateStatus } from \"../../redux/profile-reducer\";\r\nimport { AppStateType } from \"../../redux/redux-store\";\r\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\r\nimport { compose } from \"redux\";\r\nimport { ProfileType } from \"../../types/types\";\r\n\r\nclass ProfileContainer extends React.Component<PropsType, AppStateType> {\r\n  refreshProfile() {\r\n    let userId: number | null = +this.props.match.params.userId;\r\n    if (!userId) {\r\n      // this.props.authorizedUserId !== null ? (userId = this.props.authorizedUserId) : this.props.history.push(\"login\");\r\n      userId = this.props.authorizedUserId;\r\n      if (!userId) {\r\n        this.props.history.push(\"login\");\r\n      }\r\n    }\r\n    if (!userId) {\r\n      console.error(\"ID should exists in URI params or in state ('authorizedUserId')\");\r\n    } else {\r\n      this.props.getUserProfile(userId);\r\n      this.props.getStatus(userId);\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.refreshProfile();\r\n  }\r\n\r\n  componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<AppStateType>) {\r\n    if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n      this.refreshProfile();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Profile\r\n        {...this.props}\r\n        isOwner={!this.props.match.params.userId}\r\n        profile={this.props.profile}\r\n        status={this.props.status}\r\n        updateStatus={this.props.updateStatus}\r\n        savePhoto={this.props.savePhoto}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n  profile: state.profilePage.profile,\r\n  status: state.profilePage.status,\r\n  authorizedUserId: state.auth.userId,\r\n  isAuth: state.auth.isAuth,\r\n});\r\n\r\nexport default compose<ComponentType>(\r\n  connect(mapStateToProps, { getUserProfile, getStatus, updateStatus, savePhoto, saveProfile }),\r\n  withRouter\r\n)(ProfileContainer);\r\n\r\n// Types\r\ntype MapStateToPropsType = {\r\n  profile: ProfileType | null;\r\n  status: string;\r\n  authorizedUserId: number | null;\r\n  isAuth: boolean;\r\n};\r\ntype MapDispatchToPropsType = {\r\n  getUserProfile: (userId: number) => void;\r\n  getStatus: (userId: number) => void;\r\n  updateStatus: (status: string) => void;\r\n  savePhoto: (file: File) => void;\r\n  saveProfile: (profile: ProfileType) => Promise<any>;\r\n};\r\ntype PathParamsType = {\r\n  userId: string;\r\n};\r\n\r\ntype PropsType = RouteComponentProps<PathParamsType> & MapStateToPropsType & MapDispatchToPropsType;\r\n","import React, { FC } from \"react\";\nimport style from \"./FormsControls.module.css\";\nimport { Field, WrappedFieldMetaProps, WrappedFieldProps } from \"redux-form\";\nimport { FieldValidatorType } from \"../../../utils/validators/validators\";\nimport TextArea from \"antd/es/input/TextArea\";\nimport { Input } from \"antd\";\n\ntype FormsControlsPropsType = {\n  meta: WrappedFieldMetaProps;\n  //   input: WrappedFieldInputProps;\n  //   // placeholder?: string;\n  //   // type?: HTMLInputTypeAttribute;\n  //   // autoFocus?: boolean;\n};\n\nconst FormControl: FC<FormsControlsPropsType> = ({ meta: { touched, error }, children }) => {\n  const hasError = touched && error;\n  return (\n    <div className={style.formControl + \" \" + (hasError ? style.error : \"\")}>\n      <div>{children}</div>\n      {hasError && <span>{error}</span>}\n    </div>\n  );\n};\n\nexport const MyTextarea: FC<WrappedFieldProps> = (props) => {\n  const { input, meta, ...restProps } = props;\n  return (\n    <FormControl {...props}>\n      <TextArea {...input} {...restProps} />\n    </FormControl>\n  );\n};\n\nexport const MyInput: FC<WrappedFieldProps> = (props) => {\n  const { input, meta, ...restProps } = props;\n  return (\n    <FormControl {...props}>\n      <Input {...input} {...restProps} />\n    </FormControl>\n  );\n};\n\nexport function createField<FormKeysType extends string>(\n  placeholder: string | undefined,\n  name: FormKeysType,\n  validators: FieldValidatorType[],\n  component: FC<WrappedFieldProps>,\n  props: any = {},\n  text: string = \"\"\n) {\n  return (\n    <>\n      <Field placeholder={placeholder} name={name} validate={validators} component={component} {...props} /> {text}\n    </>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__iw5Wr\",\"error\":\"FormsControls_error__vUZR7\",\"formSummaryError\":\"FormsControls_formSummaryError__P7Ljl\"};"],"names":["ProfileStatusWithHooks","status","updateStatus","useState","editMode","setEditMode","newStatus","setNewStatus","useEffect","onChange","e","currentTarget","value","onBlur","autoFocus","onDoubleClick","Contact","contactTitle","contactValue","className","s","reduxForm","form","handleSubmit","error","profile","onSubmit","styleFormControls","createField","MyInput","type","MyTextarea","Object","keys","contacts","map","key","htmlType","SaveOutlined","ProfileInfo","isOwner","saveProfile","savePhoto","React","Preloader","formData","then","initialValues","ProfileData","goToEditMode","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","onClick","EditOutlined","Post","props","icon","UserOutlined","message","likesCount","MyPosts","postsElements","posts","reverse","p","id","style","addPost","newPostText","MyPostsContainer","connect","state","profilePage","profileReducerActions","Profile","useSelector","preview","src","photos","large","userPhoto","alt","htmlFor","DownloadOutlined","target","files","length","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","console","refreshProfile","prevProps","prevState","compose","auth","isAuth","withRouter","FormControl","meta","touched","children","hasError","input","restProps","placeholder","name","validators","component","text","validate"],"sourceRoot":""}